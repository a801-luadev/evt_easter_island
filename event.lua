local band = bit32.band
local next = next
local math_abs, math_ceil, math_max, math_min, math_random = math.abs, math.ceil, math.max, math.min, math.random
local setmetatable, str_format, str_gmatch, str_gsub, str_match, str_rep, str_sub = setmetatable, string.format, string.gmatch, string.gsub, string.match, string.rep, string.sub
local tbl_concat, time, tonumber, tbl_remove, tbl_unpack, type = table.concat, os.time, tonumber, table.remove, table.unpack, type

--[[ Module Info ]]--
local module = {
	name = "ea22",
	formalName = "Rabbit's Skull Archipelago",

	team = {
		developer = "Bolodefchoco#0015",
		artist = { "Santa#0095", "Anvella#0000", "Vividia#0095", "Chibi#0095" },
		creative = "Eremia#2246"
	},

	reward = {
		-- By set
		[1] = {
			[1] = "evt_easter_island_badge_181",
			[2] = "evt_easter_island_golden_ticket_50"
		},
		[2] = {
			[1] = "evt_easter_island_badge_357",
			[2] = "evt_easter_island_golden_ticket_5"
		},
		[3] = {
			[1] = "evt_easter_island_orb",
			[2] = "evt_easter_island_golden_ticket_5"
		},
		[4] = {
			[1] = "evt_easter_island_title_539",
			[2] = "evt_easter_island_golden_ticket_5"
		},
		fur = {
			sansao = "evt_easter_island_rabbit_blue",
			aliceRabbit = "evt_easter_island_rabbit_alice"
		}
	},

	minPlayers = 5,
	maxPlayers = 60,

	totalNormalSets = 3,
	totalEggsPerSet = 5,

	timeLeftForNPC = 20,

	timeToInput = 20,
	inputTimerColorVariation = (0x060000 - 0x000600), -- changing the value by hand has demonstrated to be faster than implementing HSL
	timerMaximumWeight = 10000,

	refreshEggUnlockNotifierAfter = 1000,
	removeEggUnlockNotificationAfter = 4500,

	time = 1.85 * 60,
	maps = {
		[[<C><P dodue="" name="Mosaic Isles" author="Eremia#2246" random="" sections="80,0,460,400,535,0,380,400,905,0,350,400,1265,0,460,400" L="1800" F="0" DS="m;340,190,610,230,850,70,1100,230,1340,150,1580,110" /><Z><S><S T="12" X="-59" Y="-106" L="82" H="37" P="0,-1,0.3,0.2,0,0,0,0" o="6a7495" c="4"/><S T="6" X="160" Y="140" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="320" Y="100" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="200" Y="180" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="240" Y="260" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="280" Y="380" L="160" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="360" Y="340" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="480" Y="360" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="340" Y="220" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="340" Y="140" L="40" H="40" P="1,9999,0.3,0.2,180,1,0,0" c="3"/><S T="6" X="500" Y="140" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="420" Y="260" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="460" Y="200" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="290" Y="-90" L="20" H="20" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="1"/><S T="12" X="710" Y="-90" L="20" H="20" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="2"/><S T="12" X="1075" Y="-90" L="20" H="20" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="3"/><S T="12" X="1480" Y="-90" L="20" H="20" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="4"/><S T="5" X="570" Y="120" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="610" Y="160" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="610" Y="280" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="570" Y="320" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="690" Y="360" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="730" Y="320" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="730" Y="160" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="770" Y="200" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="810" Y="320" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="850" Y="320" L="40" H="160" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="850" Y="120" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="7" X="940" Y="140" L="40" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="1080" Y="180" L="80" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="1000" Y="100" L="80" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="1200" Y="300" L="80" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="980" Y="220" L="40" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="940" Y="300" L="40" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="1100" Y="260" L="40" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="1220" Y="220" L="40" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="1180" Y="140" L="40" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="1100" Y="100" L="40" H="40" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="1040" Y="360" L="160" H="80" P="1,9999,0.1,0.2,0,1,0,0" c="3"/><S T="17" X="1300" Y="100" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1460" Y="180" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1580" Y="140" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1460" Y="260" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1420" Y="100" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1340" Y="340" L="40" H="120" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1380" Y="340" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1420" Y="380" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1360" Y="200" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1520" Y="360" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1600" Y="240" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/></S><D><P X="150" Y="120" T="0" P="0,0" egg=""/><P X="290" Y="360" T="0" P="0,0" egg=""/><P X="490" Y="320" T="0" P="0,0" egg=""/><P X="1610" Y="200" T="0" P="0,0" egg=""/><P X="1420" Y="80" T="5" P="0,0" egg=""/><P X="1382" Y="320" T="5" P="0,0" egg=""/><P X="500" Y="120" T="5" P="0,0" egg=""/><P X="1302" Y="80" T="103" C="714330,23130C" P="0,0" egg=""/><P X="1524" Y="321" T="103" C="714330,23130C" P="0,0" egg=""/><P X="241" Y="240" T="193" P="0,0" egg=""/><P X="569" Y="283" T="103" C="714330,23130C" P="0,0" egg=""/><P X="729" Y="283" T="103" C="714330,23130C" P="0,1" egg=""/><P X="729" Y="123" T="103" C="714330,23130C" P="0,1" egg=""/><P X="570" Y="81" T="115" P="0,0" egg=""/><P X="848" Y="240" T="88" P="0,0" egg=""/><P X="993" Y="324" T="80" P="0,0" egg=""/><P X="1013" Y="84" T="80" P="0,1" egg=""/><P X="1178" Y="280" T="85" C="4B8E72" P="0,0" egg=""/><P X="978" Y="150" T="85" C="4B8E72" P="0,1" egg=""/><P X="1188" Y="120" T="85" C="4B8E72" P="0,0" egg=""/></D><O/><L><JD c="6a7495,200,1,0" P1="-100,500" P2="-100,0"/><JD c="6a7495,200,1,0" P1="1900,500" P2="1900,0"/><JR M1="1" M2="13"/><JR M1="3" M2="13"/><JR M1="2" M2="13"/><JR M1="9" M2="13"/><JR M1="10" M2="13"/><JR M1="8" M2="13"/><JR M1="12" M2="13"/><JR M1="4" M2="13"/><JR M1="6" M2="13"/><JR M1="5" M2="13"/><JR M1="7" M2="13"/><JR M1="11" M2="13"/><JR M1="17" M2="14"/><JR M1="20" M2="14"/><JR M1="19" M2="14"/><JR M1="18" M2="14"/><JR M1="21" M2="14"/><JR M1="22" M2="14"/><JR M1="23" M2="14"/><JR M1="24" M2="14"/><JR M1="25" M2="14"/><JR M1="26" M2="14"/><JR M1="27" M2="14"/><JR M1="38" M2="15"/><JR M1="30" M2="15"/><JR M1="28" M2="15"/><JR M1="37" M2="15"/><JR M1="36" M2="15"/><JR M1="32" M2="15"/><JR M1="33" M2="15"/><JR M1="35" M2="15"/><JR M1="38" M2="15"/><JR M1="34" M2="15"/><JR M1="31" M2="15"/><JR M1="29" M2="15"/><JD c="6a7495,200,1,0" P1="1800,500" P2="0,500"/><JR M1="39" M2="16"/><JR M1="43" M2="16"/><JR M1="41" M2="16"/><JR M1="47" M2="16"/><JR M1="40" M2="16"/><JR M1="49" M2="16"/><JR M1="42" M2="16"/><JR M1="44" M2="16"/><JR M1="45" M2="16"/><JR M1="46" M2="16"/><JR M1="48" M2="16"/></L></Z></C>]],
		[[<C><P dodue="" L="1200" F="2" sections="0,0,392,400,400,0,397,400,800,0,400,400" name="What is this place" author="Zetdey#3845"/><Z><S><S T="10" X="398" Y="164" L="120" H="10" P="1,999999,0.3,0.2,450,1,0,0" c="3"/><S T="10" X="435" Y="230" L="80" H="30" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="6" X="255" Y="12" L="120" H="80" P="1,999999,0.3,0.2,580,1,0,0" c="3"/><S T="6" X="256" Y="385" L="280" H="60" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="600" Y="-46" L="1200" H="130" P="0,0,0.3,0.2,540,0,0,0" c="3" m=""/><S T="6" X="100" Y="254" L="200" H="20" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="6" X="100" Y="224" L="200" H="40" P="1,999999,0.3,0.2,360,1,0,0" c="3"/><S T="17" X="1094" Y="-46" L="200" H="130" P="1,999999,0.3,0.2,540,1,0,0" c="3"/><S T="10" X="584" Y="-46" L="200" H="130" P="0,0,0.3,0.2,540,0,0,0" c="3"/><S T="6" X="160" Y="214" L="80" H="100" P="1,999999,0.3,0.2,360,1,0,0" c="3"/><S T="6" X="40" Y="105" L="80" H="30" P="1,999999,0.3,0.2,360,1,0,0" c="3"/><S T="10" X="792" Y="158" L="120" H="14" P="1,999999,0.3,0.2,810,1,0,0" c="3"/><S T="6" X="335" Y="40" L="120" H="84" P="1,999999,0.3,0.2,540,1,0,0" c="3"/><S T="4" X="786" Y="172" L="10" H="123" P="1,999999,20,0,0,1,0,0" c="3"/><S T="6" X="390" Y="83" L="200" H="10" P="1,999999,0.3,0.2,270,1,0,0" c="3"/><S T="9" X="218" Y="241" L="36" H="154" P="0,0,0,0,0,0,0,0" despawn="1"/><S T="10" X="760" Y="14" L="200" H="120" P="1,999999,0.3,0.2,580,1,0,0" c="3"/><S T="17" X="899" Y="61" L="200" H="130" P="1,999999,0.3,0.2,540,1,0,0" c="3"/><S T="6" X="360" Y="205" L="80" H="70" P="1,999999,0.3,0.2,270,1,0,0" c="3"/><S T="6" X="20" Y="376" L="40" H="80" P="1,999999,0.3,0.2,360,1,0,0" c="3"/><S T="6" X="5" Y="60" L="120" H="10" P="1,999999,0.3,0.2,450,1,0,0" c="3"/><S T="10" X="546" Y="385" L="200" H="60" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="609" Y="378" L="80" H="100" P="1,999999,0.3,0.2,360,1,0,0" c="3"/><S T="10" X="759" Y="378" L="80" H="100" P="1,999999,0.3,0.2,360,1,0,0" c="3"/><S T="10" X="609" Y="231" L="80" H="30" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="10" X="512" Y="105" L="160" H="30" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="17" X="889" Y="231" L="200" H="30" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="10" X="445" Y="60" L="120" H="120" P="1,999999,0.3,0.2,540,1,0,0" c="3"/><S T="9" X="640" Y="105" L="96" H="30" P="0,0,0,0,0,0,0,0" despawn="2"/><S T="9" X="684" Y="308" L="36" H="184" P="0,0,0,0,0,0,0,0" despawn="2"/><S T="17" X="1194" Y="210" L="420" H="12" P="1,999999,0.3,0.2,990,1,0,0" c="3"/><S T="12" X="422" Y="-281" L="3000" H="562" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="3"/><S T="10" X="896" Y="375" L="280" H="60" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1140" Y="362" L="120" H="120" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1066" Y="368" L="120" H="80" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="523" Y="683" L="3000" H="562" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4"/><S T="9" X="1174" Y="224" L="28" H="156" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="17" X="942" Y="221" L="120" H="50" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="9" X="1096" Y="142" L="28" H="92" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="17" X="1150" Y="121" L="80" H="50" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="10" X="759" Y="231" L="80" H="30" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="12" X="-237" Y="218" L="475" H="670" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4"/><S T="12" X="1436" Y="192" L="475" H="670" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4" N=""/><S T="12" X="1254" Y="-51" L="40" H="37" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" lua="1"/><S T="12" X="1314" Y="-51" L="40" H="37" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" lua="2"/><S T="12" X="1374" Y="-50" L="40" H="37" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" lua="3"/></S><D><P X="-407" Y="2" T="257" P="0,0"/><P X="796" Y="0" T="133" P="0,0"/><P X="355" Y="353" T="211" P="0,0" egg=""/><P X="159" Y="162" T="211" P="0,1" egg=""/><P X="37" Y="202" T="0" P="0,0" egg=""/><P X="144" Y="353" T="0" P="0,0" egg=""/><P X="357" Y="163" T="0" P="0,1" egg=""/><P X="41" Y="89" T="211" P="0,0" egg=""/><P X="1157" Y="93" T="193" P="0,1" egg=""/><P X="604" Y="328" T="5" P="0,0" egg=""/><P X="118" Y="310" T="221" P="0,0"/><P X="632" Y="216" T="11" P="0,0"/><P X="590" Y="217" T="13" P="0,0"/><P X="581" Y="88" T="254" P="0,0"/><P X="835" Y="354" T="83" P="0,0"/><P X="518" Y="357" T="83" P="0,0"/><P X="27" Y="335" T="254" P="0,0"/><P X="835" Y="214" T="103" C="714330,23130c" P="0,0" egg="0,-20"/><P X="530" Y="90" T="80" P="0,0" egg="0,-20"/><P X="1116" Y="301" T="103" C="714330,23130c" P="0,0" egg="0,-20"/><P X="846" Y="238" T="103" C="714330,23130c" P="0,1"/><P X="738" Y="216" T="25" P="0,0" egg="0,-15"/><P X="965" Y="354" T="118" P="0,0" egg="0,-30"/><P X="447" Y="214" T="88" P="0,0" egg="-10,-20"/><DS X="18" Y="321"/></D><O/><L><JR M1="45" M2="33"/><JR M1="45" M2="30"/><JR M1="45" M2="36"/><JR M1="45" M2="39"/><JR M1="45" M2="30"/><JR M1="45" M2="34"/><JR M1="45" M2="7"/><JR M1="45" M2="17"/><JR M1="45" M2="37"/><JR M1="45" M2="26"/><JR M1="44" M2="11"/><JR M1="44" M2="13"/><JR M1="44" M2="16"/><JR M1="44" M2="8"/><JR M1="44" M2="27"/><JR M1="44" M2="25"/><JR M1="44" M2="28"/><JR M1="44"/><JR M1="44" M2="1"/><JR M1="44" M2="24"/><JR M1="44" M2="40"/><JR M1="44" M2="23"/><JR M1="44" M2="32"/><JR M1="44" M2="22"/><JR M1="44" M2="29"/><JR M1="44" M2="21"/><JR M1="43" M2="14"/><JR M1="43" M2="18"/><JR M1="43" M2="12"/><JR M1="43" M2="2"/><JR M1="43" M2="4"/><JR M1="43" M2="20"/><JR M1="43" M2="10"/><JR M1="43" M2="9"/><JR M1="43" M2="15"/><JR M1="43" M2="6"/><JR M1="43" M2="5"/><JR M1="43" M2="3"/><JR M1="43" M2="19"/></L></Z></C>]],
		[[<C><P dodue="" L="1600" DS="m;25,295,1115,330,475,355,1320,340" name="WonderLand" author="Nnaaaz#0000" random="" sections="0,0,400,400,400,0,400,400,800,0,400,400,1200,0,400,400"/><Z><S><S T="12" X="1029" Y="390" L="63" H="39" P="0,0,0.3,0.2,-180,1,0,0" o="324650" c="4" i="0,0,x_transformice/x_maps/x_halloween2015/bibliotheque-fg.png"/><S T="12" X="487" Y="19" L="63" H="39" P="0,0,0.3,0.2,360,1,0,0" o="6EDB86" c="4" i="0,0,x_transformice/x_maps/x_halloween2015/bibliotheque-fg.png"/><S T="12" X="600" Y="-200" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" N="" lua="2"/><S T="12" X="1000" Y="-200" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" N="" lua="3"/><S T="12" X="1400" Y="-200" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" N="" lua="4"/><S T="8" X="1911" Y="383" L="63" H="39" P="0,0,0.3,0.2,540,1,0,0" c="4" i="0,0,x_transformice/x_maps/x_halloween2015/bibliotheque-fg.png"/><S T="12" X="64" Y="376" L="89" H="48" P="1,9999999,0.3,0.2,0,1,0,0" o="9CAFD9" c="3"/><S T="8" X="64" Y="376" L="89" H="48" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="24" Y="355" L="89" H="48" P="1,9999999,0.3,0.2,90,1,0,0" o="9CAFD9" c="3"/><S T="8" X="24" Y="355" L="89" H="48" P="1,0,0.3,0.2,90,1,0,0" c="3"/><S T="12" X="55" Y="360" L="89" H="48" P="1,9999999,0.3,0.2,30,1,0,0" o="9CAFD9" c="3"/><S T="8" X="55" Y="360" L="89" H="48" P="1,0,0.3,0.2,30,1,0,0" c="3"/><S T="12" X="342" Y="379" L="101" H="47" P="1,9999999,0.3,0.2,-50,1,0,0" o="9CAFD9" c="3"/><S T="8" X="342" Y="379" L="101" H="47" P="1,0,0.3,0.2,-50,1,0,0" c="3"/><S T="12" X="-289" Y="71" L="63" H="39" P="0,0,0.3,0.2,-4,1,0,0" o="324650" c="4" i="0,0,x_transformice/x_maps/x_halloween2015/bibliotheque-fg.png"/><S T="12" X="206" Y="165" L="84" H="28" P="1,9999999,0.3,0.2,-180,1,0,0" o="9CAFD9" c="3"/><S T="12" X="375" Y="376" L="101" H="38" P="1,9999999,0.3,0.2,-90,1,0,0" o="9CAFD9" c="3"/><S T="8" X="205" Y="165" L="84" H="28" P="1,0,0.3,0.2,-180,1,0,0" c="3"/><S T="8" X="375" Y="376" L="101" H="38" P="1,0,0.3,0.2,-90,1,0,0" c="3"/><S T="12" X="132" Y="129" L="113" H="34" P="1,9999999,0.3,0.2,-140,1,0,0" o="9CAFD9" c="3"/><S T="8" X="132" Y="129" L="113" H="34" P="1,0,0.3,0.2,-140,1,0,0" c="3"/><S T="12" X="75" Y="142" L="150" H="40" P="1,9999999,0.3,0.2,-180,1,0,0" o="9CAFD9" c="3"/><S T="8" X="75" Y="142" L="150" H="40" P="1,0,0.3,0.2,-180,1,0,0" c="3"/><S T="12" X="296" Y="97" L="132" H="22" P="1,9999999,0.3,0.2,0,1,0,0" o="9CAFD9" c="3"/><S T="8" X="296" Y="97" L="132" H="22" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="196" Y="399" L="40" H="40" P="1,9999999,0.3,0.2,45,1,0,0" o="9CAFD9" c="3"/><S T="8" X="196" Y="399" L="40" H="40" P="1,0,0.3,0.2,45,1,0,0" c="3"/><S T="13" X="696" Y="272" L="10" P="1,9999999,0.3,0.2,0,1,0,0" o="BF8E45" c="3"/><S T="12" X="188" Y="269" L="106" H="27" P="1,9999999,0.3,0.2,0,1,0,0" o="9CAFD9" c="3"/><S T="8" X="188" Y="269" L="106" H="27" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="708" Y="123" L="75" H="59" P="1,9999999,0.3,0.2,0,1,0,0" o="BF8E45" c="3"/><S T="8" X="708" Y="123" L="75" H="59" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="695" Y="163" L="76" H="72" P="1,9999999,0.3,0.2,30,1,0,0" o="BF8E45" c="3"/><S T="8" X="695" Y="163" L="76" H="72" P="1,0,0.3,0.2,30,1,0,0" c="3"/><S T="12" X="736" Y="286" L="100" H="34" P="1,9999999,0.3,0.2,0,1,0,0" o="BF8E45" c="3"/><S T="8" X="736" Y="286" L="100" H="34" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="774" Y="337" L="136" H="25" P="1,9999999,0.3,0.2,-90,1,0,0" o="BF8E45" c="3"/><S T="8" X="774" Y="337" L="136" H="25" P="1,0,0.3,0.2,-90,1,0,0" c="3"/><S T="12" X="1118" Y="360" L="100" H="34" P="1,9999999,0.3,0.2,-360,1,0,0" o="D99C9C" c="3"/><S T="8" X="1118" Y="360" L="100" H="34" P="1,9999999,0.3,0.2,-360,1,0,0" c="3"/><S T="12" X="861" Y="87" L="112" H="24" P="1,9999999,0.3,0.2,-360,1,0,0" o="D99C9C" c="3"/><S T="8" X="861" Y="86" L="112" H="24" P="1,9999999,0.3,0.2,-360,1,0,0" c="3"/><S T="12" X="817" Y="48" L="94" H="24" P="1,9999999,0.3,0.2,-450,1,0,0" o="D99C9C" c="3"/><S T="8" X="817" Y="48" L="94" H="24" P="1,9999999,0.3,0.2,-450,1,0,0" c="3"/><S T="12" X="875" Y="10" L="139" H="24" P="1,9999999,0.3,0.2,-540,1,0,0" o="D99C9C" c="3"/><S T="8" X="875" Y="10" L="139" H="24" P="1,9999999,0.3,0.2,-540,1,0,0" c="3"/><S T="12" X="962" Y="404" L="100" H="70" P="1,9999999,0.3,0.2,90,1,0,0" o="D99C9C" c="3"/><S T="8" X="962" Y="404" L="100" H="70" P="1,9999999,0.3,0.2,90,1,0,0" c="3"/><S T="12" X="911" Y="381" L="100" H="34" P="1,9999999,0.3,0.2,-90,1,0,0" o="D99C9C" c="3"/><S T="8" X="911" Y="381" L="100" H="34" P="1,9999999,0.3,0.2,-90,1,0,0" c="3"/><S T="12" X="945" Y="344" L="100" H="34" P="1,9999999,0.3,0.2,30,1,0,0" o="D99C9C" c="3"/><S T="8" X="945" Y="344" L="100" H="34" P="1,9999999,0.3,0.2,30,1,0,0" c="3"/><S T="12" X="972" Y="181" L="128" H="25" P="1,9999999,0.3,0.2,0,1,0,0" o="D99C9C" c="3"/><S T="8" X="972" Y="181" L="127" H="25" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="945" Y="160" L="25" H="25" P="1,9999999,0.3,0.2,0,1,0,0" o="D99C9C" c="3"/><S T="8" X="945" Y="160" L="25" H="25" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="13" X="515" Y="371" L="10" P="1,9999999,0.3,0.2,0,1,0,0" o="BF8E45" c="3"/><S T="12" X="970" Y="139" L="25" H="25" P="1,9999999,0.3,0.2,0,1,0,0" o="D99C9C" c="3"/><S T="8" X="970" Y="139" L="25" H="25" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="995" Y="118" L="25" H="25" P="1,9999999,0.3,0.2,0,1,0,0" o="D99C9C" c="3"/><S T="8" X="995" Y="118" L="25" H="25" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="512" Y="63" L="32" H="14" P="1,9999999,0.3,0.2,0,1,0,0" o="BF8E45" c="3"/><S T="8" X="512" Y="63" L="32" H="14" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="1024" Y="99" L="34" H="28" P="1,9999999,0.3,0.2,0,1,0,0" o="D99C9C" c="3"/><S T="8" X="1024" Y="99" L="34" H="28" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="532" Y="87" L="100" H="34" P="1,9999999,0.3,0.2,-160,1,0,0" o="BF8E45" c="3"/><S T="8" X="532" Y="87" L="100" H="34" P="1,0,0.3,0.2,-160,1,0,0" c="3"/><S T="12" X="964" Y="155" L="172" H="34" P="1,9999999,0.3,0.2,-220,1,0,0" o="D99C9C" c="3"/><S T="8" X="964" Y="155" L="172" H="34" P="1,9999999,0.3,0.2,-220,1,0,0" c="3"/><S T="12" X="475" Y="387" L="100" H="34" P="1,9999999,0.3,0.2,0,1,0,0" o="BF8E45" c="3"/><S T="8" X="475" Y="387" L="100" H="34" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="587" Y="318" L="100" H="29" P="1,9999999,0.3,0.2,0,1,0,0" o="BF8E45" c="3"/><S T="12" X="439" Y="198" L="31" H="10" P="1,9999999,0.3,0.2,0,1,0,0" o="BF8E45" c="3"/><S T="8" X="587" Y="318" L="100" H="29" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="480" Y="222" L="31" H="104" P="1,9999999,0.3,0.2,-95,1,0,0" o="BF8E45" c="3"/><S T="8" X="480" Y="222" L="31" H="104" P="1,0,0.3,0.2,-95,1,0,0" c="3"/><S T="12" X="477" Y="203" L="31" H="103" P="1,9999999,0.3,0.2,-105,1,0,0" o="BF8E45" c="3"/><S T="8" X="477" Y="203" L="31" H="103" P="1,0,0.3,0.2,-105,1,0,0" c="3"/><S T="12" X="587" Y="332" L="70" H="70" P="1,9999999,0.3,0.2,-45,1,0,0" o="BF8E45" c="3"/><S T="8" X="587" Y="332" L="70" H="70" P="1,0,0.3,0.2,-45,1,0,0" c="3"/><S T="12" X="850" Y="260" L="40" H="40" P="1,9999999,0.3,0.2,45,1,0,0" o="D99C9C" c="3"/><S T="12" X="880" Y="399" L="30" H="30" P="1,9999999,0.3,0.2,0,1,0,0" o="D99C9C" c="3"/><S T="8" X="850" Y="260" L="40" H="40" P="1,9999999,0.3,0.2,45,1,0,0" c="3"/><S T="8" X="880" Y="399" L="30" H="30" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="1132" Y="204" L="133" H="35" P="1,9999999,0.3,0.2,95,1,0,0" o="D99C9C" c="3"/><S T="8" X="1132" Y="204" L="133" H="35" P="1,9999999,0.3,0.2,95,1,0,0" c="3"/><S T="12" X="81" Y="121" L="26" H="25" P="1,9999999,0.3,0.2,-50,1,0,0" o="9CAFD9" c="3"/><S T="8" X="81" Y="121" L="26" H="25" P="1,0,0.3,0.2,-50,1,0,0" c="3"/><S T="12" X="181" Y="12" L="362" H="26" P="1,9999999,0.3,0.2,0,1,0,0" o="9CAFD9" c="3"/><S T="8" X="181" Y="12" L="362" H="26" P="1,0,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="1156" Y="129" L="72" H="27" P="1,9999999,0.3,0.2,0,1,0,0" o="D99C9C" c="3"/><S T="8" X="1156" Y="129" L="72" H="27" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="1497" Y="413" L="60" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" o="6EDB86" c="3"/><S T="8" X="1497" Y="413" L="60" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" c="4"/><S T="12" X="1520" Y="403" L="80" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" o="6EDB86" c="3"/><S T="8" X="1520" Y="403" L="80" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" c="4"/><S T="12" X="1543" Y="393" L="100" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" o="6EDB86" c="3"/><S T="8" X="1543" Y="393" L="100" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" c="4"/><S T="12" X="1566" Y="383" L="120" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" o="6EDB86" c="3"/><S T="8" X="1566" Y="383" L="120" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" c="4"/><S T="12" X="1589" Y="373" L="140" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" o="6EDB86" c="3"/><S T="12" X="352" Y="85" L="293" H="35" P="1,9999999,0.3,0.2,-80,1,0,0" o="9CAFD9" c="3"/><S T="8" X="352" Y="85" L="293" H="35" P="1,0,0.3,0.2,-80,1,0,0" c="3"/><S T="8" X="1589" Y="373" L="140" H="24" P="1,9999999,0.3,0.2,-90,1,0,0" c="4"/><S T="12" X="1257" Y="98" L="30" H="217" P="1,9999999,0.3,0.2,10,1,0,0" o="6EDB86" c="3"/><S T="8" X="1257" Y="98" L="30" H="217" P="1,9999999,0.3,0.2,10,1,0,0" c="4"/><S T="12" X="1270" Y="214" L="93" H="28" P="1,9999999,0.3,0.2,0,1,0,0" o="6EDB86" c="3"/><S T="8" X="1270" Y="214" L="93" H="28" P="1,9999999,0.3,0.2,0,1,0,0" c="4"/><S T="12" X="1305" Y="391" L="112" H="76" P="1,9999999,0.3,0.2,20,1,0,0" o="6EDB86" c="3"/><S T="12" X="1320" Y="359" L="31" H="11" P="1,9999999,0.3,0.2,0,1,0,0" o="6EDB86" c="3"/><S T="8" X="1305" Y="391" L="112" H="76" P="1,9999999,0.3,0.2,20,1,0,0" c="4"/><S T="12" X="1374" Y="81" L="31" H="73" P="1,9999999,0.3,0.2,80,1,0,0" o="6EDB86" c="3"/><S T="12" X="1396" Y="272" L="30" H="50" P="1,9999999,0.3,0.2,100,1,0,0" o="6EDB86" c="3"/><S T="8" X="1374" Y="81" L="31" H="73" P="1,9999999,0.3,0.2,80,1,0,0" c="4"/><S T="8" X="1395" Y="271" L="30" H="50" P="1,9999999,0.3,0.2,100,1,0,0" c="4"/><S T="12" X="1530" Y="226" L="26" H="80" P="1,9999999,0.3,0.2,0,1,0,0" o="6EDB86" c="3"/><S T="8" X="1530" Y="226" L="26" H="80" P="1,9999999,0.3,0.2,0,1,0,0" c="4"/><S T="12" X="1491" Y="153" L="121" H="27" P="1,9999999,0.3,0.2,45,1,0,0" o="6EDB86" c="3"/><S T="8" X="1491" Y="153" L="121" H="27" P="1,9999999,0.3,0.2,45,1,0,0" c="4"/><S T="12" X="1483" Y="202" L="70" H="24" P="1,9999999,0.3,0.2,0,1,0,0" o="6EDB86" c="3"/><S T="8" X="1483" Y="202" L="70" H="24" P="1,9999999,0.3,0.2,0,1,0,0" c="4"/><S T="12" X="1475" Y="119" L="36" H="36" P="1,9999999,0.3,0.2,0,1,0,0" o="6EDB86" c="3"/><S T="8" X="1475" Y="119" L="36" H="36" P="1,9999999,0.3,0.2,0,1,0,0" c="4"/><S T="12" X="198" Y="-200" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" N="" lua="1"/><S T="12" X="800" Y="-200" L="2000" H="400" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="3"/><S T="12" X="800" Y="600" L="2000" H="400" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/></S><D><P X="0" Y="0" T="257" P="0,0"/><P X="800" Y="0" T="257" P="0,0"/><P X="400" Y="350" T="264" P="0,0"/><P X="1200" Y="350" T="264" P="0,1"/><P X="1016" Y="168" T="70" P="0,0" egg=""/><P X="1153" Y="119" T="72" P="0,0" egg=""/><P X="865" Y="73" T="62" P="0,0" egg=""/><P X="180" Y="254" T="88" P="0,0" egg=""/><P X="36" Y="120" T="143" P="0,0" egg=""/><P X="284" Y="87" T="142" P="0,0" egg=""/><P X="711" Y="92" T="253" P="0,0" egg=""/><P X="737" Y="267" T="261" P="0,0" egg=""/><P X="445" Y="191" T="228" P="0,0" egg=""/><P X="511" Y="56" T="195" P="0,0" egg=""/><P X="877" Y="383" T="178" P="0,0" egg=""/><P X="439" Y="123" T="162" P="0,0"/><P X="1293" Y="198" T="240" P="0,0" egg=""/><P X="1469" Y="189" T="252" P="0,0" egg=""/><P X="1565" Y="322" T="260" P="0,0"/><P X="1472" Y="101" T="263" P="0,0" egg=""/><P X="1370" Y="66" T="228" P="0,0" egg=""/><P X="1152" Y="49" T="163" P="0,0"/><P X="823" Y="151" T="163" P="0,0"/><P X="300" Y="287" T="163" P="0,0"/><P X="996" Y="193" T="210" P="0,0"/><P X="618" Y="303" T="236" P="0,0"/><P X="554" Y="304" T="254" P="0,0"/><P X="710" Y="302" T="247" P="0,0"/><P X="1023" Y="86" T="132" P="0,0" egg=""/><P X="207" Y="148" T="153" P="0,0"/><P X="296" Y="286" T="219" P="0,0"/><P X="805" Y="167" T="219" P="0,0"/><P X="1226" Y="282" T="219" P="0,0"/><P X="1401" Y="257" T="222" P="0,0" egg=""/></D><O/><L><JR M1="102" M2="101"/><JR M1="24" M2="23"/><JR M1="89" M2="88"/><JR M1="17" M2="15"/><JR M1="20" M2="19"/><JR M1="87" M2="86"/><JR M1="22" M2="21"/><JR M1="18" M2="16"/><JR M1="13" M2="12"/><JR M1="26" M2="25"/><JR M1="7" M2="6"/><JR M1="11" M2="10"/><JR M1="9" M2="10"/><JR M1="29" M2="28"/><JR M1="123" M2="88"/><JR M1="123" M2="101"/><JR M1="123" M2="23"/><JR M1="123" M2="19"/><JR M1="123" M2="86"/><JR M1="123" M2="21"/><JR M1="123" M2="15"/><JR M1="123" M2="28"/><JR M1="123" M2="8"/><JR M1="123" M2="10"/><JR M1="123" M2="6"/><JR M1="123" M2="25"/><JR M1="123" M2="12"/><JR M1="123" M2="16"/><JR M1="62" M2="61"/><JR M1="66" M2="65"/><JR M1="31" M2="30"/><JR M1="33" M2="32"/><JR M1="77" M2="76"/><JR M1="75" M2="74"/><JR M1="70" M2="69"/><JR M1="73" M2="71"/><JR M1="79" M2="78"/><JR M1="35" M2="34"/><JR M1="37" M2="36"/><JR M1="61" M2="2"/><JR M1="65" M2="2"/><JR M1="30" M2="2"/><JR M1="32" M2="2"/><JR M1="72" M2="2"/><JR M1="76" M2="2"/><JR M1="74" M2="2"/><JR M1="69" M2="2"/><JR M1="56" M2="2"/><JR M1="71" M2="2"/><JR M1="78" M2="2"/><JR M1="34" M2="2"/><JR M1="36" M2="2"/><JR M1="45" M2="44"/><JR M1="43" M2="42"/><JR M1="41" M2="40"/><JR M1="91" M2="90"/><JR M1="85" M2="84"/><JR M1="64" M2="63"/><JR M1="60" M2="59"/><JR M1="58" M2="57"/><JR M1="55" M2="54"/><JR M1="53" M2="52"/><JR M1="68" M2="67"/><JR M1="82" M2="80"/><JR M1="83" M2="81"/><JR M1="51" M2="50"/><JR M1="49" M2="48"/><JR M1="47" M2="46"/><JR M1="39" M2="38"/><JR M1="44" M2="3"/><JR M1="42" M2="3"/><JR M1="40" M2="3"/><JR M1="63" M2="3"/><JR M1="59" M2="3"/><JR M1="57" M2="3"/><JR M1="54" M2="3"/><JR M1="52" M2="3"/><JR M1="67" M2="3"/><JR M1="80" M2="3"/><JR M1="81" M2="3"/><JR M1="48" M2="3"/><JR M1="46" M2="3"/><JR M1="50" M2="3"/><JR M1="90" M2="3"/><JR M1="38" M2="3"/><JR M1="105" M2="104"/><JR M1="107" M2="106"/><JR M1="113" M2="111"/><JR M1="114" M2="112"/><JR M1="122" M2="121"/><JR M1="118" M2="117"/><JR M1="120" M2="119"/><JR M1="116" M2="115"/><JR M1="103" M2="100"/><JR M1="99" M2="98"/><JR M1="97" M2="96"/><JR M1="95" M2="94"/><JR M1="93" M2="92"/><JR M1="110" M2="108"/><JR M1="104" M2="4"/><JR M1="106" M2="4"/><JR M1="111" M2="4"/><JR M1="112" M2="4"/><JR M1="109" M2="4"/><JR M1="108" M2="4"/><JR M1="121" M2="4"/><JR M1="117" M2="4"/><JR M1="119" M2="4"/><JR M1="115" M2="4"/><JR M1="100" M2="4"/><JR M1="98" M2="4"/><JR M1="96" M2="4"/><JR M1="94" M2="4"/><JR M1="92" M2="4"/><JR M1="3" M2="84"/><JR M1="27" M2="2"/></L></Z></C>]],
		[[<C><P dodue="" H="2000" DS="m;690,1740,320,1530,455,1155,165,640,440,100" background="17ee1ae27ce.png" mc="" name="Stairway To Heaven" author="Nnaaaz#0000" sections="0,1600,800,400,0,1200,800,400,0,807,800,390,0,400,800,400,0,0,800,400"/><Z><S><S T="1" X="723" Y="1972" L="34" H="73" P="1,9999999,0,0.2,-20,1,0,0" c="3"/><S T="1" X="632" Y="1957" L="34" H="104" P="1,9999999,0,0.2,-20,1,0,0" c="3"/><S T="1" X="539" Y="1944" L="34" H="131" P="1,9999999,0,0.2,-20,1,0,0" c="3"/><S T="1" X="762" Y="1719" L="36" H="27" P="1,9999999,0,0.2,-90,1,0,0" c="3"/><S T="4" X="773" Y="1883" L="10" H="180" P="1,9999999,20,0.2,-180,1,0,0" c="3"/><S T="4" X="583" Y="1835" L="10" H="42" P="1,9999999,20,0.2,-185,1,0,0" c="3"/><S T="1" X="449" Y="1931" L="34" H="156" P="1,9999999,0,0.2,-20,1,0,0" c="3"/><S T="6" X="623" Y="1984" L="335" H="36" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="628" Y="1807" L="57" H="25" P="1,9999999,0.3,0.2,-50,1,0,0" c="3"/><S T="5" X="653" Y="1849" L="135" H="18" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="613" Y="1832" L="44" H="63" P="1,9999999,0.3,0.2,86,1,0,0" c="3"/><S T="5" X="782" Y="1890" L="198" H="17" P="1,9999999,0.3,0.2,90,1,0,0" c="3"/><S T="5" X="626" Y="1782" L="36" H="34" P="1,9999999,0.3,0.2,-20,1,0,0" c="3"/><S T="1" X="750" Y="1751" L="47" H="27" P="1,9999999,0,0.2,-45,1,0,0" c="3"/><S T="6" X="771" Y="1729" L="40" H="115" P="1,9999999,0.3,0.2,360,1,0,0" c="3"/><S T="6" X="711" Y="1776" L="159" H="40" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="110" Y="1342" L="214" H="20" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="306" Y="1258" L="34" H="84" P="1,9999999,0.3,0,-60,1,0,0" c="3"/><S T="10" X="305" Y="1290" L="46" H="130" P="1,9999999,0.3,0,-40,1,0,0" c="3"/><S T="10" X="15" Y="1382" L="22" H="274" P="1,9999999,0.3,0,0,1,0,0" c="3"/><S T="10" X="314" Y="1438" L="17" H="127" P="1,9999999,0.3,0,-90,1,0,0" c="3"/><S T="10" X="306" Y="1382" L="46" H="160" P="1,9999999,0.3,0,-130,1,0,0" c="3"/><S T="5" X="191" Y="1243" L="177" H="42" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="55" Y="1427" L="101" H="50" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="4" X="379" Y="1570" L="10" H="49" P="1,9999999,20,0.2,-180,1,0,0" c="3"/><S T="6" X="215" Y="1427" L="90" H="50" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="319" Y="1570" L="119" H="50" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="75" Y="1547" L="78" H="64" P="1,9999999,0.3,0,10,1,0,0" c="3"/><S T="10" X="41" Y="1543" L="73" H="74" P="1,9999999,0.3,0,0,1,0,0" c="3"/><S T="5" X="514" Y="1806" L="42" H="29" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="670" Y="124" L="40" H="22" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="567" Y="124" L="40" H="22" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="617" Y="231" L="24" H="12" P="1,9999999,0.3,0.2,10,1,0,0" c="3"/><S T="17" X="713" Y="304" L="51" H="22" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="9" X="136" Y="1460" L="24" H="60" P="0,0,0,0,0,0,0,0" despawn="2"/><S T="17" X="594" Y="258" L="40" H="72" P="1,9999999,0.3,0.2,-150,1,0,0" c="3"/><S T="17" X="654" Y="154" L="40" H="72" P="1,9999999,0.3,0.2,-150,1,0,0" c="3"/><S T="17" X="551" Y="154" L="40" H="72" P="1,9999999,0.3,0.2,-150,1,0,0" c="3"/><S T="17" X="438" Y="148" L="40" H="58" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="468" Y="298" L="40" H="178" P="1,9999999,0.3,0.2,30,1,0,0" c="3"/><S T="17" X="473" Y="123" L="40" H="154" P="1,9999999,0.3,0.2,-150,1,0,0" c="3"/><S T="17" X="776" Y="138" L="40" H="35" P="1,9999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="739" Y="191" L="40" H="141" P="1,9999999,0.3,0.2,-150,1,0,0" c="3"/><S T="17" X="790" Y="219" L="366" H="16" P="1,9999999,0.3,0.2,-630,1,0,0" c="3"/><S T="17" X="701" Y="104" L="93" H="10" P="1,9999999,0.3,0.2,-600,1,0,0" c="3"/><S T="17" X="598" Y="104" L="93" H="10" P="1,9999999,0.3,0.2,-600,1,0,0" c="3"/><S T="17" X="608" Y="203" L="93" H="10" P="1,9999999,0.3,0.2,660,1,0,0" c="3"/><S T="17" X="657" Y="331" L="40" H="107" P="1,9999999,0.3,0.2,30,1,0,0" c="3"/><S T="17" X="597" Y="55" L="40" H="380" P="1,9999999,0.3,0.2,-90,1,0,0" c="3"/><S T="17" X="597" Y="382" L="40" H="380" P="1,9999999,0.3,0.2,-90,1,0,0" c="3"/><S T="13" X="164" Y="697" L="40" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="260" Y="617" L="40" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="86" Y="496" L="40" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="312" Y="492" L="40" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="199" Y="446" L="18" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="376" Y="427" L="18" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="163" Y="583" L="26" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="164" Y="791" L="13" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="359" Y="763" L="13" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="261" Y="752" L="26" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="55" Y="759" L="34" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="358" Y="671" L="31" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="13" X="47" Y="618" L="40" P="1,9999999,5,0.2,0,1,0,0" o="2E190C" c="3"/><S T="7" X="436" Y="820" L="30" H="14" P="1,9999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="476" Y="845" L="126" H="43" P="1,9999999,0.1,0.2,10,1,0,0" c="3"/><S T="7" X="713" Y="875" L="96" H="44" P="1,9999999,0.1,0.2,-20,1,0,0" c="3"/><S T="7" X="682" Y="915" L="86" H="22" P="1,9999999,0.1,0.2,-90,1,0,0" c="3"/><S T="7" X="714" Y="953" L="86" H="20" P="1,9999999,0.1,0.2,-180,1,0,0" c="3"/><S T="7" X="558" Y="963" L="62" H="24" P="1,9999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="455" Y="940" L="31" H="24" P="1,9999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="500" Y="952" L="72" H="25" P="1,9999999,0.1,0.2,20,1,0,0" c="3"/><S T="7" X="586" Y="1098" L="72" H="24" P="1,9999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="470" Y="1180" L="72" H="24" P="1,9999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="686" Y="1074" L="52" H="40" P="1,9999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="686" Y="1168" L="52" H="40" P="1,9999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="744" Y="1088" L="84" H="42" P="1,9999999,0.1,0.2,20,1,0,0" c="3"/><S T="7" X="743" Y="1154" L="84" H="42" P="1,9999999,0.1,0.2,-20,1,0,0" c="3"/><S T="9" X="605" Y="1043" L="30" H="85" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="9" X="490" Y="1132" L="30" H="72" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="7" X="770" Y="1114" L="90" H="42" P="1,9999999,0.1,0.2,90,1,0,0" c="3"/><S T="9" X="573" Y="915" L="30" H="72" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="9" X="435" Y="781" L="30" H="67" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="7" X="453" Y="1028" L="46" H="44" P="1,9999999,0.1,0.2,0,1,0,0" c="3"/><S T="12" X="202" Y="1804" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="1"/><S T="12" X="600" Y="1400" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="2"/><S T="12" X="200" Y="1000" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="3"/><S T="12" X="600" Y="600" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="4"/><S T="12" X="200" Y="200" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="5"/><S T="12" X="537" Y="1641" L="261" H="27" P="1,9999,0.3,0.2,16,1,0,0" o="324650" c="4" m=""/><S T="12" X="577" Y="1772" L="108" H="33" P="1,9999,0.3,0.2,-20,1,0,0" o="324650" c="4" m=""/><S T="12" X="178" Y="1529" L="173" H="53" P="1,9999,0.3,0.2,10,1,0,0" o="324650" c="4" m=""/><S T="12" X="58" Y="1298" L="58" H="59" P="1,9999,0.3,0.2,0,1,0,0" o="324650" c="4" m=""/><S T="12" X="313" Y="1241" L="98" H="39" P="1,9999,0.3,0.2,30,1,0,0" o="324650" c="4" m=""/><S T="12" X="272" Y="475" L="209" H="28" P="1,9999,5,0.2,-33,1,0,0" o="324650" c="4" m=""/><S T="12" X="528" Y="320" L="37" H="72" P="1,9999,0.3,0.2,-30,1,0,0" o="324650" c="4" m=""/></S><D><P X="84" Y="455" T="178" P="0,0" egg=""/><P X="54" Y="727" T="190" P="0,0" egg=""/><P X="260" Y="584" T="26" P="0,0" egg="3,-20"/><P X="44" Y="586" T="191" P="0,0" egg="0,-20"/><P X="356" Y="641" T="239" P="0,0" egg=""/><P X="722" Y="941" T="8" P="0,0" egg=""/><P X="691" Y="1151" T="80" P="0,0" egg="0,-20"/><P X="451" Y="1007" T="132" P="0,0" egg="0,-15"/><P X="457" Y="928" T="164" P="0,0" egg=""/><P X="752" Y="1021" T="224" P="0,0" egg="18,35"/><P X="53" Y="1508" T="229" P="0,0" egg="0,-20"/><P X="353" Y="1431" T="135" P="0,0" egg="0,-20"/><P X="199" Y="1331" T="106" P="0,0" egg="0,-10"/><P X="676" Y="1965" T="5" P="0,0" egg=""/><P X="503" Y="1969" T="141" P="0,0" egg="0,-15"/><P X="598" Y="1809" T="252" P="0,0" egg=""/><P X="679" Y="1839" T="189" P="0,0" egg=""/><P X="771" Y="1672" T="195" P="0,0" egg=""/><P X="190" Y="1221" T="252" P="0,0" egg=""/><P X="702" Y="362" T="231" P="0,0" egg=""/><P X="672" Y="112" T="261" P="0,0" egg=""/><P X="568" Y="75" T="207" P="0,0" egg="0,20"/><P X="588" Y="363" T="151" P="0,0" egg=""/><P X="771" Y="66" T="54" P="0,0" egg="0,40"/><P X="781" Y="292" T="111" P="0,0"/><P X="578" Y="199" T="176" P="0,0"/><P X="601" Y="425" T="233" P="0,0"/><P X="128" Y="710" T="209" P="0,0"/><P X="103" Y="524" T="209" P="0,0"/><P X="324" Y="519" T="209" P="0,0"/><P X="725" Y="849" T="243" P="0,0"/><P X="135" Y="1262" T="160" P="0,0"/><P X="57" Y="1214" T="179" P="0,0"/><P X="336" Y="1366" T="111" P="0,0"/><P X="358" Y="1542" T="149" P="0,0"/><P X="186" Y="1573" T="108" P="0,0"/><P X="236" Y="1402" T="188" P="0,0"/><P X="631" Y="984" T="163" P="0,0"/><P X="535" Y="1886" T="163" P="0,0"/><P X="449" Y="1759" T="219" P="0,0"/><P X="712" Y="1893" T="221" P="0,0"/><P X="570" Y="1912" T="220" P="0,0"/><P X="718" Y="295" T="222" P="0,0"/><P X="571" Y="1080" T="9" P="0,0"/><P X="688" Y="1055" T="7" P="0,0"/><P X="501" Y="833" T="12" P="0,0"/><P X="671" Y="871" T="4" P="0,0"/><P X="545" Y="951" T="31" P="0,0"/><P X="586" Y="843" T="162" P="0,0"/><P X="504" Y="1711" T="162" P="0,0"/><P X="478" Y="1162" T="82" P="0,0"/><P X="584" Y="1110" T="216" P="0,0"/><P X="517" Y="1051" T="131" C="555D77" P="0,0"/><P X="251" Y="1274" T="41" P="0,1"/><P X="258" Y="1439" T="109" P="0,0"/><P X="261" Y="772" T="207" P="0,0"/><P X="119" Y="627" T="218" P="0,0"/><P X="504" Y="365" T="204" P="0,0"/><P X="483" Y="202" T="147" P="0,0"/><P X="430" Y="184" T="60" C="C54000" P="0,0"/><P X="358" Y="699" T="159" P="0,0"/><P X="262" Y="649" T="159" P="0,0"/><P X="262" Y="700" T="159" P="0,0"/><P X="285" Y="643" T="209" P="0,0"/><P X="163" Y="608" T="159" P="0,0"/><P X="164" Y="733" T="159" P="0,0"/><P X="144" Y="488" T="221" P="0,0"/><P X="237" Y="492" T="220" P="0,0"/><P X="684" Y="1758" T="181" P="0,0"/><P X="668" Y="279" T="236" P="0,0"/><P X="420" Y="277" T="220" P="0,0"/><P X="62" Y="1404" T="136" P="0,0" egg="0,-20"/><P X="620" Y="226" T="168" P="0,0"/></D><O><O X="574" Y="1774" C="336" P="-15,0"/><O X="318" Y="1236" C="702" P="30,0"/><O X="647" Y="1674" C="625" P="0"/><O X="548" Y="1647" C="625" P="0"/><O X="446" Y="1617" C="625" P="0"/><O X="334" Y="426" C="319" P="-32,0"/><O X="170" Y="1527" C="441" P="10,0"/><O X="73" Y="1316" C="124" P="0"/><O X="41" Y="1284" C="124" P="0"/><O X="41" Y="1316" C="124" P="0"/><O X="531" Y="318" C="335" P="60,0"/><O X="200" Y="518" C="618" P="-10,0"/><O X="447" Y="1616" C="22" P="0"/><O X="550" Y="1649" C="22" P="0"/><O X="648" Y="1674" C="22" P="0"/><O X="541" Y="1782" C="22" P="0"/><O X="614" Y="1762" C="22" P="0"/><O X="241" Y="1541" C="22" P="0"/><O X="110" Y="1517" C="22" P="0"/><O X="34" Y="1275" C="22" P="0"/><O X="52" Y="1307" C="22" P="0"/><O X="65" Y="1308" C="22" P="0"/><O X="348" Y="1258" C="22" P="0"/><O X="283" Y="1220" C="22" P="0"/><O X="200" Y="518" C="22" P="0"/><O X="303" Y="447" C="22" P="0"/><O X="337" Y="427" C="22" P="0"/><O X="517" Y="300" C="22" P="0"/><O X="540" Y="334" C="22" P="0"/><O X="33" Y="1325" C="22" P="0"/><O X="48" Y="1293" C="22" P="0"/><O X="83" Y="1325" C="22" P="0"/></O><L><JR M1="83" M2="88"/><JR M1="84" M2="90"/><JR M1="84" M2="91"/><JR M1="84" M2="92"/><JR M1="86" M2="93"/><JR M1="87" M2="94"/><JR M1="83" M2="89"/><JR M1="83" M2="29"/><JR M1="83" M2="12"/><JR M1="83" M2="15"/><JR M1="83" M2="13"/><JR M1="3" M2="83"/><JR M1="83" M2="14"/><JR M1="83" M2="8"/><JR M1="83" M2="10"/><JR M1="83" M2="9"/><JR M1="83" M2="11"/><JR M1="83" M2="7"/><JR M1="83"/><JR M1="83" M2="1"/><JR M1="83" M2="2"/><JR M1="83" M2="6"/><JR M1="84" M2="24"/><JR M1="84" M2="26"/><JR M1="84" M2="27"/><JR M1="84" M2="28"/><JR M1="84" M2="20"/><JR M1="84" M2="21"/><JR M1="84" M2="25"/><JR M1="84" M2="23"/><JR M1="84" M2="19"/><JR M1="84" M2="16"/><JR M1="84" M2="22"/><JR M1="84" M2="18"/><JR M1="84" M2="17"/><JR M1="85" M2="72"/><JR M1="85" M2="82"/><JR M1="85" M2="71"/><JR M1="85" M2="70"/><JR M1="85" M2="68"/><JR M1="85" M2="65"/><JR M1="85" M2="66"/><JR M1="85" M2="67"/><JR M1="85" M2="73"/><JR M1="85" M2="75"/><JR M1="85" M2="79"/><JR M1="85" M2="76"/><JR M1="85" M2="74"/><JR M1="85" M2="64"/><JR M1="85" M2="63"/><JR M1="86" M2="58"/><JR M1="86" M2="57"/><JR M1="86" M2="59"/><JR M1="86" M2="61"/><JR M1="86" M2="51"/><JR M1="86" M2="50"/><JR M1="86" M2="60"/><JR M1="86" M2="56"/><JR M1="86" M2="62"/><JR M1="86" M2="52"/><JR M1="86" M2="54"/><JR M1="86" M2="53"/><JR M1="86" M2="55"/><JR M1="87" M2="48"/><JR M1="87" M2="38"/><JR M1="87" M2="40"/><JR M1="87" M2="30"/><JR M1="87" M2="44"/><JR M1="87" M2="35"/><JR M1="87" M2="39"/><JR M1="87" M2="49"/><JR M1="87" M2="47"/><JR M1="87" M2="42"/><JR M1="87" M2="41"/><JR M1="87" M2="43"/><JR M1="87" M2="33"/><JR M1="83" M2="4"/><JR M1="85" M2="69"/><JR M1="83" M2="5"/><JR M1="87" M2="37"/><JR M1="87" M2="31"/><JR M1="87" M2="45"/><JR M1="87" M2="32"/><JR M1="87" M2="46"/><JR M1="87" M2="36"/></L></Z></C>]],
		[[<C><P dodue="" L="2000" D="../wp-content/uploads/2012/01/Earth.png,1270,75;../wp-content/uploads/2012/01/Earth.png,1172,75;../wp-content/uploads/2012/01/Earth.png,1084,55;../wp-content/uploads/2012/01/Earth.png,1267,26;../wp-content/uploads/2012/01/Earth.png,1159,22;../wp-content/uploads/2012/01/Earth.png,1051,6;../wp-content/uploads/2012/01/Earth.png,1354,61;../wp-content/uploads/2012/01/Earth.png,1354,18;17eec047cdd.png,0,-30" DS="m;90,222,960,345,1370,350,1634,354" mc="" background="17eefea4ad8.png,0,-30" name="Four Seasons" author="Nnaaaz#0000" random="" sections="0,0,500,400,500,0,500,400,1000,0,500,400,1500,0,500,400,"/><Z><S><S T="5" X="979" Y="89" L="34" H="177" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="250" Y="-120" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="1"/><S T="12" X="750" Y="-120" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="2"/><S T="12" X="1250" Y="-120" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="3"/><S T="12" X="1750" Y="-120" L="40" H="40" P="1,-1,0.3,0.2,0,1,0,0" c="4" lua="4"/><S T="5" X="744" Y="1" L="47" H="481" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="12" X="500" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="8" X="1635" Y="73" L="10" H="60" P="1,999999,0.3,0.2,0,1,0,0" c="4"/><S T="8" X="1865" Y="73" L="10" H="60" P="1,999999,0.3,0.2,0,1,0,0" c="4"/><S T="12" X="1000" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="12" X="1500" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="4" X="1750" Y="119" L="248" H="34" P="1,999999,5,0.1,0,1,0,0" c="3"/><S T="4" X="1974" Y="181" L="40" H="34" P="1,999999,5,0.1,0,1,0,0" c="3"/><S T="4" X="1606" Y="202" L="42" H="34" P="1,999999,5,0.1,0,1,0,0" c="3"/><S T="11" X="1750" Y="118" L="240" H="40" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="12" X="1845" Y="271" L="25" H="36" P="1,999999,0,0.2,-20,1,0,0" o="08A5F3" c="3"/><S T="1" X="1845" Y="271" L="25" H="36" P="1,999999,0,0.2,-20,1,0,0" c="3"/><S T="11" X="1857" Y="394" L="48" H="12" P="1,999999,0.3,0.1,180,1,0,0" c="3"/><S T="11" X="1695" Y="307" L="48" H="12" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="12" X="1534" Y="144" L="25" H="25" P="1,999999,0,0.2,-135,1,0,0" o="08A5F3" c="4"/><S T="1" X="1534" Y="144" L="25" H="25" P="1,999999,0,0.2,-135,1,0,0" c="3"/><S T="11" X="1753" Y="25" L="496" H="46" P="1,999999,0.3,0.1,180,1,0,0" c="3"/><S T="11" X="1910" Y="244" L="32" H="40" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="11" X="1939" Y="380" L="120" H="40" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="11" X="1910" Y="269" L="120" H="40" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="9" X="1984" Y="305" L="28" H="110" P="0,0,0,0,0,0,0,0" despawn="4"/><S T="9" X="1533" Y="323" L="28" H="84" P="0,0,0,0,0,0,0,0" despawn="4"/><S T="11" X="1583" Y="279" L="42" H="41" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="11" X="1764" Y="367" L="80" H="30" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="11" X="1978" Y="180" L="40" H="40" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="11" X="1649" Y="201" L="120" H="40" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="11" X="1615" Y="298" L="138" H="32" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="11" X="1585" Y="382" L="160" H="32" P="1,999999,0.3,0.1,0,1,0,0" c="3"/><S T="5" X="1469" Y="201" L="42" H="27" P="1,999999,0.3,0.2,-80,1,0,0" c="3"/><S T="5" X="1457" Y="232" L="42" H="27" P="1,999999,0.3,0.2,-60,1,0,0" c="3"/><S T="5" X="1360" Y="196" L="45" H="27" P="1,999999,0.3,0.2,-100,1,0,0" c="3"/><S T="5" X="1436" Y="256" L="42" H="27" P="1,999999,0.3,0.2,-40,1,0,0" c="3"/><S T="17" X="1070" Y="112" L="40" H="51" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1150" Y="172" L="57" H="26" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1113" Y="167" L="31" H="29" P="1,999999,0.3,0.2,20,1,0,0" c="3"/><S T="17" X="1090" Y="156" L="27" H="30" P="1,999999,0.3,0.2,30,1,0,0" c="3"/><S T="17" X="1070" Y="143" L="29" H="30" P="1,999999,0.3,0.2,40,1,0,0" c="3"/><S T="17" X="1053" Y="126" L="26" H="29" P="1,999999,0.3,0.2,50,1,0,0" c="3"/><S T="17" X="1041" Y="105" L="36" H="29" P="1,999999,0.3,0.2,70,1,0,0" c="3"/><S T="17" X="1451" Y="117" L="40" H="86" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1036" Y="57" L="78" H="30" P="1,999999,0.3,0.2,90,1,0,0" c="3"/><S T="17" X="1474" Y="94" L="182" H="24" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="17" X="1310" Y="93" L="80" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1368" Y="266" L="120" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1406" Y="385" L="120" H="41" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1107" Y="268" L="120" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="534" Y="309" L="40" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1072" Y="378" L="80" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1230" Y="362" L="120" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="894" Y="379" L="200" H="40" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="554" Y="338" L="80" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="692" Y="234" L="80" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="696" Y="360" L="80" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="694" Y="263" L="200" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1254" Y="13" L="464" H="29" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="6" X="918" Y="162" L="154" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="666" Y="158" L="80" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="922" Y="132" L="80" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="735" Y="81" L="160" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="882" Y="290" L="80" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="9" X="581" Y="286" L="26" H="74" P="0,0,0,0,0,0,0,0" despawn="2"/><S T="17" X="1403" Y="170" L="120" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="9" X="807" Y="304" L="26" H="113" P="0,0,0,0,0,0,0,0" despawn="2"/><S T="9" X="719" Y="181" L="26" H="74" P="0,0,0,0,0,0,0,0" despawn="2"/><S T="9" X="641" Y="106" L="26" H="74" P="0,0,0,0,0,0,0,0" despawn="2"/><S T="7" X="248" Y="390" L="496" H="27" P="1,9999999999,0.1,0.2,0,1,0,0" c="3"/><S T="5" X="420" Y="278" L="151" H="10" P="1,9999999999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="420" Y="280" L="63" H="23" P="1,9999999999,0.3,0.2,-10,1,0,0" c="3"/><S T="5" X="133" Y="254" L="63" H="23" P="1,999999,0.3,0.2,-140,1,0,0" c="3"/><S T="7" X="487" Y="341" L="18" H="120" P="1,9999999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="8" Y="335" L="18" H="130" P="1,9999999999,0.1,0.2,0,1,0,0" c="3"/><S T="5" X="150" Y="261" L="159" H="26" P="1,9999999999,0.3,0.2,10,1,0,0" c="3"/><S T="7" X="148" Y="272" L="160" H="35" P="1,9999999999,0.1,0.2,10,1,0,0" c="3"/><S T="7" X="260" Y="388" L="36" H="51" P="1,9999999999,0.1,0.2,-45,1,0,0" c="3"/><S T="7" X="23" Y="379" L="30" H="37" P="1,9999999999,0.1,0.2,-55,1,0,0" c="3"/><S T="7" X="68" Y="299" L="56" H="12" P="1,9999999999,0.1,0.2,-80,1,0,0" c="3"/><S T="7" X="83" Y="330" L="52" H="12" P="1,9999999999,0.1,0.2,-180,1,0,0" c="3"/><S T="7" X="422" Y="369" L="26" H="55" P="1,9999999999,0.1,0.2,-15,1,0,0" c="3"/><S T="7" X="354" Y="314" L="26" H="53" P="1,9999999999,0.1,0.2,-165,1,0,0" c="3"/><S T="7" X="213" Y="310" L="20" H="54" P="1,9999999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="90" Y="107" L="52" H="26" P="1,999999,0.1,0.2,-90,1,0,0" c="3"/><S T="7" X="45" Y="168" L="52" H="26" P="1,999999,0.1,0.2,-180,1,0,0" c="3"/><S T="7" X="289" Y="138" L="94" H="24" P="1,999999,0.1,0.2,-110,1,0,0" c="3"/><S T="7" X="64" Y="131" L="100" H="30" P="1,999999,0.1,0.2,-90,1,0,0" c="3"/><S T="7" X="421" Y="288" L="150" H="18" P="1,9999999999,0.1,0.2,0,1,0,0" c="3"/><S T="9" X="90" Y="165" L="24" H="66" P="0,0,0,0,0,0,0,0" despawn="1"/><S T="9" X="114" Y="120" L="24" H="77" P="0,0,0,0,0,0,0,0" despawn="1"/><S T="9" X="359" Y="189" L="24" H="77" P="0,0,0,0,0,0,0,0" despawn="1"/><S T="7" X="265" Y="192" L="54" H="12" P="1,999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="246" Y="114" L="82" H="48" P="1,999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="392" Y="74" L="59" H="28" P="1,999999,0.1,0.2,-20,1,0,0" c="3"/><S T="7" X="408" Y="85" L="123" H="34" P="1,999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="371" Y="6" L="195" H="25" P="1,999999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="480" Y="45" L="114" H="30" P="1,999999,0.1,0.2,-90,1,0,0" c="3"/><S T="7" X="314" Y="174" L="66" H="48" P="1,999999,0.1,0.2,0,1,0,0" c="3"/><S T="12" X="1000" Y="-44" L="2200" H="90" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="12" X="1000" Y="443" L="2200" H="90" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="12" X="1171" Y="91" L="32" H="31" P="1,999999,0.3,0.2,0,1,0,0" o="324650" c="4" m=""/><S T="12" X="1233" Y="334" L="114" H="27" P="1,999999,0.3,0.2,0,1,0,0" o="324650" c="4" m=""/><S T="9" X="248" Y="337" L="460" H="78" P="0,0,0,0,0,0,0,0" despawn="1"/><S T="1" X="1734" Y="73" L="186" H="50" P="1,0,0,0.2,0,1,0,0"/></S><D><P X="924" Y="368" T="1" P="0,0"/><P X="1397" Y="257" T="13" P="0,0"/><P X="1363" Y="258" T="13" P="0,0"/><P X="1330" Y="255" T="13" P="0,0"/><P X="1462" Y="96" T="111" P="0,0"/><P X="1929" Y="88" T="162" P="0,0"/><P X="281" Y="237" T="221" P="0,0"/><P X="153" Y="149" T="220" P="0,0"/><P X="285" Y="51" T="226" P="0,0"/><P X="1253" Y="210" T="237" P="0,0"/><P X="1100" Y="156" T="253" P="0,0"/><P X="1407" Y="457" T="134" P="0,0"/><P X="1157" Y="263" T="116" P="0,0"/><P X="1057" Y="105" T="110" P="0,0"/><P X="1707" Y="189" T="64" P="0,0"/><P X="1980" Y="187" T="54" P="0,0"/><P X="1551" Y="115" T="163" P="0,0"/><P X="1589" Y="205" T="61" P="0,0"/><P X="859" Y="146" T="11" P="0,0"/><P X="687" Y="76" T="12" P="0,0"/><P X="775" Y="69" T="12" P="0,0"/><P X="666" Y="344" T="3" P="0,0"/><P X="1450" Y="74" T="222" P="0,0"/><P X="1174" Y="76" T="254" P="0,0"/><P X="154" Y="384" T="84" P="0,0"/><P X="1349" Y="156" T="55" P="0,0"/><P X="365" Y="62" T="9" P="0,0" despawn="1"/><P X="533" Y="295" T="79" P="0,0"/><P X="97" Y="240" T="11" P="0,0"/><P X="199" Y="253" T="236" P="0,0"/><P X="861" Y="361" T="252" P="0,0"/><P X="439" Y="100" T="209" P="0,0"/><P X="421" Y="68" T="181" P="0,0"/><P X="34" Y="216" T="218" P="0,0"/><P X="1221" Y="2" T="41" P="0,0"/><P X="1273" Y="112" T="160" P="0,0"/><P X="822" Y="220" T="221" P="0,0"/><P X="370" Y="369" T="81" P="0,0"/><P X="293" Y="389" T="250" P="0,0"/><P X="317" Y="382" T="249" P="0,0"/><P X="483" Y="336" T="230" P="0,0"/><P X="8" Y="270" T="254" P="0,0"/><P X="569" Y="188" T="219" P="0,0"/><P X="180" Y="381" T="88" P="0,0" egg="0,-20"/><P X="90" Y="316" T="82" P="0,0" egg="0,5"/><P X="466" Y="381" T="80" P="0,1" egg="-10,-20"/><P X="292" Y="378" T="85" C="A39764" P="0,0" egg=""/><P X="444" Y="70" T="189" P="0,0" egg=""/><P X="259" Y="186" T="25" P="0,0" egg=""/><P X="33" Y="155" T="32" P="0,0" egg=""/><P X="72" Y="82" T="132" P="0,0" egg="0,-20"/><P X="265" Y="89" T="261" P="0,0" egg=""/><P X="369" Y="273" T="8" P="0,0" egg=""/><P X="923" Y="117" T="211" P="0,0" egg=""/><P X="728" Y="67" T="245" P="0,0" egg=""/><P X="691" Y="146" T="244" P="0,0" egg=""/><P X="765" Y="248" T="240" P="0,0" egg=""/><P X="706" Y="345" T="0" P="0,0" egg=""/><P X="1904" Y="256" T="63" P="0,0" egg="-30,-20"/><P X="879" Y="275" T="228" P="0,0" egg=""/><P X="1066" Y="88" T="106" P="0,0" egg="0,-10"/><P X="1310" Y="79" T="135" P="0,0" egg="0,-20"/><P X="1121" Y="254" T="141" P="0,0" egg=""/><P X="1395" Y="154" T="229" P="0,0" egg="0,-20"/><P X="1047" Y="366" T="195" P="0,0" egg="0,-20"/><P X="1408" Y="264" T="185" P="0,0" egg="0,-45"/><P X="1700" Y="306" T="263" P="0,0" egg=""/><P X="1834" Y="100" T="191" P="0,0" egg=""/><P X="1654" Y="98" T="190" P="0,0" egg=""/><P X="1977" Y="160" T="258" P="0,0" egg=""/><P X="1852" Y="388" T="62" P="0,0" egg=""/><P X="1929" Y="360" T="261" P="0,0" egg=""/><P X="1748" Y="352" T="143" P="0,0" egg=""/></D><O><O X="1172" Y="90" C="140" P="0"/><O X="1233" Y="337" C="706" P="0"/><O X="1181" Y="93" C="22" P="0"/><O X="1164" Y="92" C="22" P="0"/><O X="1196" Y="340" C="22" P="0"/><O X="1264" Y="340" C="22" P="0"/></O><L><JP M1="105" M2="4" AXIS="1,0" LIM1="-1.1666666666666667" LIM2="0"/><JR M1="1" M2="97"/><JR M1="1" M2="98"/><JR M1="1" M2="96"/><JR M1="1" M2="95"/><JR M1="1" M2="94"/><JR M1="1" M2="87"/><JR M1="1" M2="99"/><JR M1="1" M2="93"/><JR M1="1" M2="85"/><JR M1="1" M2="88"/><JR M1="1" M2="86"/><JR M1="1" M2="73"/><JR M1="1" M2="76"/><JR M1="1" M2="77"/><JR M1="1" M2="84"/><JR M1="1" M2="80"/><JR M1="1" M2="81"/><JR M1="1" M2="75"/><JR M1="1" M2="70"/><JR M1="1" M2="79"/><JR M1="1" M2="83"/><JR M1="1" M2="72"/><JR M1="1" M2="71"/><JR M1="1" M2="89"/><JR M1="1" M2="82"/><JR M1="1" M2="74"/><JR M1="2" M2="5"/><JR M1="2"/><JR M1="2" M2="62"/><JR M1="2" M2="63"/><JR M1="2" M2="60"/><JR M1="2" M2="61"/><JR M1="2" M2="56"/><JR M1="2" M2="58"/><JR M1="2" M2="64"/><JR M1="2" M2="57"/><JR M1="2" M2="55"/><JR M1="2" M2="51"/><JR M1="2" M2="54"/><JR M1="3" M2="59"/><JR M1="3" M2="45"/><JR M1="3" M2="43"/><JR M1="3" M2="41"/><JR M1="3" M2="40"/><JR M1="3" M2="39"/><JR M1="3" M2="38"/><JR M1="3" M2="37"/><JR M1="3" M2="102"/><JR M1="3" M2="47"/><JR M1="3" M2="44"/><JR M1="3" M2="46"/><JR M1="3" M2="66"/><JR M1="3" M2="35"/><JR M1="3" M2="33"/><JR M1="3" M2="34"/><JR M1="3" M2="36"/><JR M1="3" M2="48"/><JR M1="3" M2="50"/><JR M1="3" M2="52"/><JR M1="3" M2="103"/><JR M1="3" M2="53"/><JR M1="3" M2="49"/><JR M1="19" M2="20"/><JR M1="15" M2="16"/><JR M1="4" M2="21"/><JR M1="4" M2="7"/><JR M1="4" M2="8"/><JR M1="4" M2="14"/><JR M1="4" M2="11"/><JR M1="4" M2="20"/><JR M1="4" M2="29"/><JR M1="4" M2="12"/><JR M1="4" M2="30"/><JR M1="4" M2="13"/><JR M1="4" M2="27"/><JR M1="4" M2="31"/><JR M1="4" M2="18"/><JR M1="4" M2="24"/><JR M1="4" M2="23"/><JR M1="4" M2="17"/><JR M1="4" M2="28"/><JR M1="4" M2="32"/><JR M1="3" M2="42"/><JR M1="1" M2="78"/><JR M1="4" M2="16"/><JR M1="82" M2="83"/><JR M1="83" M2="84"/><JR M1="84" M2="81"/><JR M1="81" M2="80"/><JR M1="19" M2="4"/><JR M1="4" M2="22"/></L></Z></C>]],
		[[<C><P dodue="" L="1800" DS="m;1067,317,51,202,1449,291" mc="" name="Bridge" author="Nnaaaz#0000" random="" sections="0,0,600,400,600,0,600,400,1200,0,1200,400"/><Z><S><S T="12" X="424" Y="309" L="50" H="50" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="1"/><S T="12" X="941" Y="322" L="517" H="45" P="1,-1,0.3,0.2,4,1,0,0" o="324650" c="4" m="" lua="2"/><S T="12" X="1415" Y="296" L="50" H="50" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="3"/><S T="16" X="1020" Y="95" L="35" H="10" P="1,0,0.3,0.2,138,0,0,0" c="3"/><S T="16" X="993" Y="117" L="36" H="10" P="1,0,0.3,0.2,142,0,0,0" c="3"/><S T="16" X="685" Y="315" L="35" H="10" P="1,0,0.3,0.2,166,0,0,0" c="3"/><S T="8" X="965" Y="138" L="37" H="10" P="1,0,0.3,0.2,146,0,0,0" c="4"/><S T="8" X="1365" Y="327" L="43" H="10" P="1,0,0.3,0.2,164,0,0,0" c="4"/><S T="16" X="651" Y="322" L="36" H="10" P="1,0,0.3,0.2,170,0,0,0" c="3"/><S T="16" X="936" Y="156" L="36" H="10" P="1,0,0.3,0.2,150,0,0,0" c="3"/><S T="16" X="1401" Y="316" L="41" H="10" P="1,0,0.3,0.2,160,0,0,0" c="3"/><S T="8" X="612" Y="327" L="45" H="10" P="1,0,0.3,0.2,174,0,0,0" c="4"/><S T="16" X="905" Y="173" L="35" H="10" P="1,0,0.3,0.2,154,0,0,0" c="3"/><S T="16" X="202" Y="301" L="41" H="10" P="1,0,0.3,0.2,209,0,0,0" c="3"/><S T="16" X="579" Y="329" L="32" H="10" P="1,0,0.3,0.2,178,0,0,0" c="3"/><S T="8" X="1262" Y="345" L="38" H="10" P="1,0,0.3,0.2,-183,0,0,0" c="4"/><S T="8" X="142" Y="263" L="42" H="10" P="1,0,0.3,0.2,-142,0,0,0" c="4"/><S T="8" X="511" Y="326" L="47" H="10" P="1,0,0.3,0.2,-173,0,0,0" c="4"/><S T="16" X="420" Y="128" L="35" H="10" P="1,0,0.3,0.2,158,0,0,0" c="3"/><S T="16" X="171" Y="283" L="33" H="10" P="1,0,0.3,0.2,213,0,0,0" c="3"/><S T="8" X="357" Y="148" L="45" H="10" P="1,0,0.3,0.2,-193,0,0,0" c="4"/><S T="16" X="1330" Y="336" L="37" H="10" P="1,0,0.3,0.2,168,0,0,0" c="3"/><S T="16" X="548" Y="329" L="34" H="10" P="1,0,0.3,0.2,-177,0,0,0" c="3"/><S T="16" X="390" Y="139" L="29" H="10" P="1,0,0.3,0.2,-197,0,0,0" c="3"/><S T="16" X="1296" Y="342" L="37" H="10" P="1,0,0.3,0.2,-187,0,0,0" c="3"/><S T="16" X="112" Y="237" L="40" H="10" P="1,0,0.3,0.2,-138,0,0,0" c="3"/><S T="16" X="200" Y="167" L="35" H="10" P="1,0,0.3,0.2,-217,0,0,0" c="3"/><S T="16" X="475" Y="321" L="34" H="10" P="1,0,0.3,0.2,-169,0,0,0" c="3"/><S T="16" X="319" Y="156" L="37" H="10" P="1,0,0.3,0.2,-189,0,0,0" c="3"/><S T="8" X="142" Y="205" L="37" H="10" P="1,0,0.3,0.2,-209,0,0,0" c="4"/><S T="16" X="1226" Y="346" L="35" H="10" P="1,0,0.3,0.2,-179,0,0,0" c="3"/><S T="16" X="1202" Y="345" L="24" H="10" P="1,0,0.3,0.2,-177,0,0,0" c="3"/><S T="16" X="171" Y="187" L="37" H="10" P="1,0,0.3,0.2,-213,0,0,0" c="3"/><S T="5" X="771" Y="307" L="44" H="44" P="1,999999,0.3,0.2,45,1,0,0" c="3"/><S T="4" X="78" Y="272" L="85" H="10" P="1,99999,10,0.2,270,1,0,0" c="3"/><S T="16" X="442" Y="313" L="37" H="10" P="1,0,0.3,0.2,-165,0,0,0" c="3"/><S T="8" X="112" Y="220" L="36" H="10" P="1,0,0.3,0.2,-205,0,0,0" c="4"/><S T="16" X="320" Y="310" L="212" H="14" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="16" X="57" Y="226" L="91" H="14" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="0" X="257" Y="159" L="100" H="14" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="16" X="447" Y="124" L="41" H="14" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="845" Y="358" L="29" H="101" P="1,999999,0.3,0.2,13,1,0,0" c="3"/><S T="16" X="723" Y="312" L="45" H="14" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="780" Y="356" L="132" H="104" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="771" Y="308" L="40" H="40" P="1,999999,0.3,0.2,45,1,0,0" c="3"/><S T="16" X="1439" Y="310" L="50" H="14" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="16" X="1168" Y="345" L="48" H="14" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="0" X="322" Y="350" L="160" H="95" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="0" X="60" Y="324" L="119" H="20" P="1,99999,0.3,0.2,360,1,0,0" c="3"/><S T="0" X="40" Y="276" L="80" H="116" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="0" X="480" Y="157" L="80" H="80" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="0" X="499" Y="192" L="190" H="20" P="1,99999,0.3,0.2,180,1,0,0" c="3"/><S T="0" X="257" Y="177" L="80" H="50" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="0" X="87" Y="97" L="80" H="50" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="0" X="246" Y="73" L="80" H="30" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="40" Y="276" L="70" H="105" P="1,99999,0.3,0.2,180,1,0,0" c="4"/><S T="5" X="60" Y="325" L="110" H="10" P="1,99999,0.3,0.2,180,1,0,0" c="4"/><S T="5" X="480" Y="157" L="70" H="70" P="1,99999,0.3,0.2,180,1,0,0" c="4"/><S T="5" X="500" Y="192" L="180" H="10" P="1,99999,0.3,0.2,180,1,0,0" c="4"/><S T="5" X="257" Y="177" L="70" H="40" P="1,99999,0.3,0.2,180,1,0,0" c="4"/><S T="5" X="87" Y="97" L="70" H="40" P="1,99999,0.3,0.2,180,1,0,0" c="4"/><S T="5" X="246" Y="73" L="70" H="20" P="1,99999,0.3,0.2,180,1,0,0" c="4"/><S T="5" X="322" Y="350" L="150" H="85" P="1,99999,0.3,0.2,180,1,0,0" c="4"/><S T="10" X="845" Y="358" L="24" H="95" P="1,999999,0.3,0.2,13,1,0,0" c="3"/><S T="10" X="782" Y="356" L="129" H="100" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1496" Y="350" L="120" H="95" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="832" Y="175" L="44" H="44" P="1,999999,0.3,0.2,45,1,0,0" c="3"/><S T="6" X="1686" Y="411" L="150" H="89" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1540" Y="364" L="120" H="200" P="1,99999,0.3,0.2,-10,1,0,0" c="3"/><S T="6" X="1574" Y="349" L="120" H="200" P="1,99999,0.3,0.2,10,1,0,0" c="3"/><S T="6" X="1572" Y="369" L="120" H="200" P="1,99999,0.3,0.2,30,1,0,0" c="3"/><S T="5" X="831" Y="199" L="126" H="52" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="892" Y="221" L="82" H="10" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="832" Y="176" L="40" H="40" P="1,999999,0.3,0.2,45,1,0,0" c="3"/><S T="10" X="831" Y="201" L="120" H="50" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="626" Y="117" L="230" H="22" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="5" X="1178" Y="125" L="248" H="22" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="5" X="904" Y="15" L="576" H="22" P="1,999999,0.3,0.2,-180,1,0,0" c="3"/><S T="5" X="655" Y="218" L="80" H="46" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="901" Y="10" L="578" H="22" P="1,999999,0.3,0.2,-180,1,0,0" c="3"/><S T="10" X="622" Y="121" L="238" H="22" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="12" X="1456" Y="161" L="10" H="40" P="1,1000,20,0.2,0,0,0,0" o="4E301D" c="3"/><S T="12" X="1456" Y="205" L="10" H="40" P="1,1000,20,0.2,0,0,0,0" o="4E301D" c="3"/><S T="5" X="715" Y="97" L="160" H="46" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="712" Y="97" L="160" H="40" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="652" Y="219" L="80" H="42" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="4" X="1457" Y="141" L="168" H="30" P="1,99999,10,0.2,0,1,0,0" c="3"/><S T="6" X="1457" Y="140" L="160" H="32" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="1121" Y="337" L="44" H="44" P="1,999999,0.3,0.2,45,1,0,0" c="3"/><S T="5" X="1108" Y="103" L="160" H="54" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="4" X="1258" Y="155" L="21" H="70" P="1,99999,10,0.2,-26,1,0,0" c="3"/><S T="10" X="1111" Y="103" L="160" H="48" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1268" Y="146" L="40" H="66" P="1,99999,0.3,0.2,-26,1,0,0" c="3"/><S T="5" X="1040" Y="384" L="32" H="70" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="5" X="1110" Y="377" L="133" H="86" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="1042" Y="384" L="28" H="70" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="10" X="1121" Y="338" L="40" H="40" P="1,999999,0.3,0.2,45,1,0,0" c="3"/><S T="10" X="1110" Y="377" L="128" H="80" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="1110" Y="227" L="160" H="48" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="1066" Y="202" L="40" H="46" P="1,999999,0.3,0.2,10,1,0,0" c="3"/><S T="10" X="1112" Y="228" L="158" H="44" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="4" X="1298" Y="175" L="21" H="77" P="1,99999,10,0.2,210,1,0,0" c="3"/><S T="4" X="1258" Y="199" L="21" H="70" P="1,99999,10,0.2,170,1,0,0" c="3"/><S T="6" X="1291" Y="163" L="40" H="66" P="1,99999,0.3,0.2,30,1,0,0" c="3"/><S T="6" X="1270" Y="194" L="40" H="66" P="1,99999,0.3,0.2,-10,1,0,0" c="3"/><S T="10" X="1181" Y="126" L="250" H="22" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="6" X="1271" Y="233" L="130" H="27" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1615" Y="181" L="80" H="27" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1590" Y="73" L="80" H="27" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1351" Y="64" L="80" H="27" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1770" Y="156" L="80" H="41" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1760" Y="32" L="120" H="121" P="1,99999,0.3,0.2,-150,1,0,0" c="3"/><S T="5" X="1784" Y="257" L="55" H="22" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="1806" Y="100" L="120" H="54" P="1,99999,0.3,0.2,-110,1,0,0" c="3"/><S T="6" X="1769" Y="180" L="71" H="30" P="1,99999,0.3,0.2,-150,1,0,0" c="3"/><S T="6" X="1780" Y="277" L="71" H="30" P="1,99999,0.3,0.2,-150,1,0,0" c="3"/><S T="6" X="1809" Y="280" L="284" H="35" P="1,99999,0.3,0.2,-90,1,0,0" c="3"/><S T="6" X="1727" Y="27" L="120" H="113" P="1,99999,0.3,0.2,-170,1,0,0" c="3"/><S T="6" X="1656" Y="23" L="120" H="125" P="1,99999,0.3,0.2,-190,1,0,0" c="3"/><S T="9" X="730" Y="233" L="24" H="64" P="0,0,0,0,0,0,0,0" despawn="2"/><S T="13" X="1456" Y="185" L="10" P="1,1000,20,0.2,0,0,0,0" o="2E190C" c="3"/><S T="9" X="23" Y="135" L="30" H="80" P="0,0,0,0,0,0,0,0" despawn="1"/><S T="10" X="797" Y="112" L="10" H="10" P="1,999999,0.3,0,0,1,0,0" c="3"/><S T="10" X="797" Y="90" L="10" H="10" P="1,999999,0.3,0,0,1,0,0" c="3"/><S T="12" X="840" Y="-100" L="2000" H="200" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="3"/><S T="12" X="840" Y="500" L="2000" H="200" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="12" X="-100" Y="200" L="800" H="200" P="0,0,0.3,0.2,-90,0,0,0" o="6A7495" c="4"/><S T="12" X="1900" Y="200" L="800" H="200" P="0,0,0.3,0.2,-90,0,0,0" o="6A7495" c="4"/></S><D><P X="1100" Y="126" T="109" P="0,0"/><P X="629" Y="22" T="107" P="0,0"/><P X="893" Y="22" T="102" C="CF6A27,95D9D6,665C50,E9E2DA" P="0,0"/><P X="1327" Y="56" T="11" P="0,0"/><P X="1577" Y="59" T="222" P="0,0"/><P X="59" Y="70" T="178" P="0,0"/><P X="28" Y="539" T="148" P="0,0"/><P X="1379" Y="237" T="219" P="0,0"/><P X="285" Y="303" T="181" P="0,0"/><P X="353" Y="303" T="181" P="0,0"/><P X="841" Y="224" T="160" P="0,0"/><P X="1086" Y="250" T="160" P="0,0"/><P X="1179" Y="75" T="111" P="0,0"/><P X="12" Y="219" T="188" P="0,0"/><P X="254" Y="151" T="193" P="0,0"/><P X="1132" Y="203" T="103" C="714330,23130C" P="0,0" egg=""/><P X="423" Y="185" T="195" P="0,0" egg=""/><P X="911" Y="214" T="106" P="0,0" egg=""/><P X="1772" Y="247" T="263" P="0,0" egg=""/><P X="1758" Y="142" T="245" P="0,0" egg=""/><P X="1608" Y="168" T="228" P="0,0" egg=""/><P X="1352" Y="52" T="0" P="0,0" egg=""/><P X="1226" Y="220" T="242" P="0,0" egg=""/><P X="569" Y="183" T="189" P="0,1" egg=""/><P X="103" Y="316" T="248" P="0,0" egg=""/><P X="95" Y="70" T="190" P="0,0" egg=""/><P X="253" Y="60" T="141" P="0,0" egg=""/><P X="669" Y="196" T="115" P="0,0" egg=""/><P X="1109" Y="75" T="113" P="0,0" egg=""/><P X="690" Y="73" T="261" P="0,0" egg=""/><P X="1443" Y="553" T="1" P="0,0"/></D><O><O X="127" Y="213" C="14" P="0"/><O X="157" Y="197" C="14" P="0"/><O X="434" Y="311" C="14" P="0"/><O X="184" Y="177" C="14" P="0"/><O X="460" Y="318" C="14" P="0"/><O X="301" Y="159" C="14" P="0"/><O X="1209" Y="345" C="14" P="0"/><O X="1198" Y="346" C="14" P="0"/><O X="211" Y="159" C="14" P="0"/><O X="491" Y="324" C="14" P="0"/><O X="336" Y="153" C="14" P="0"/><O X="100" Y="225" C="14" P="0"/><O X="1243" Y="346" C="14" P="0"/><O X="533" Y="328" C="14" P="0"/><O X="377" Y="144" C="14" P="0"/><O X="127" Y="250" C="14" P="0"/><O X="1280" Y="344" C="14" P="0"/><O X="563" Y="330" C="14" P="0"/><O X="403" Y="135" C="14" P="0"/><O X="157" Y="273" C="14" P="0"/><O X="1313" Y="340" C="14" P="0"/><O X="594" Y="328" C="14" P="0"/><O X="432" Y="125" C="14" P="0"/><O X="184" Y="291" C="14" P="0"/><O X="1347" Y="332" C="14" P="0"/><O X="634" Y="325" C="14" P="0"/><O X="921" Y="165" C="14" P="0"/><O X="216" Y="308" C="14" P="0"/><O X="1382" Y="322" C="14" P="0"/><O X="669" Y="319" C="14" P="0"/><O X="952" Y="147" C="14" P="0"/><O X="1407" Y="314" C="14" P="0"/><O X="693" Y="313" C="14" P="0"/><O X="980" Y="128" C="14" P="0"/><O X="1006" Y="106" C="14" P="0"/><O X="1029" Y="87" C="14" P="0"/><O X="947" Y="324" C="4" P="12,0"/><O X="1706" Y="358" C="701" P="0"/><O X="535" Y="168" C="1" P="0"/><O X="894" Y="179" C="14" P="0"/><O X="1664" Y="367" C="22" P="0"/><O X="1704" Y="367" C="22" P="0"/><O X="1748" Y="367" C="22" P="0"/><O X="865" Y="306" C="22" P="0"/><O X="1018" Y="339" C="22" P="0"/><O X="534" Y="183" C="22" P="0"/><O X="518" Y="168" C="22" P="0"/><O X="1456" Y="154" C="22" P="0"/><O X="1456" Y="179" C="14" P="0"/><O X="1457" Y="193" C="14" P="0"/><O X="1453" Y="109" C="610" P="-20,0"/><O X="1455" Y="124" C="22" P="0"/></O><L><JR M1="2" M2="65"/><JR M1="2" M2="68"/><JR M1="2" M2="69"/><JR M1="2" M2="70"/><JR M1="2" M2="67"/><JR M1="2" M2="116"/><JR M1="2" M2="115"/><JR M1="2" M2="112"/><JR M1="2" M2="114"/><JR M1="2" M2="110"/><JR M1="2" M2="113"/><JR M1="2" M2="111"/><JR M1="2" M2="117"/><JR M1="2" M2="118"/><JR M1="2" M2="108"/><JR M1="2" M2="86"/><JR M1="2" M2="87"/><JR M1="2" M2="106"/><JR M1="2" M2="104"/><JR M1="2" M2="102"/><JR M1="2" M2="103"/><JR M1="2" M2="92"/><JR M1="2" M2="101"/><JR M1="2" M2="90"/><JR M1="2" M2="109"/><JR M1="1" M2="97"/><JR M1="1" M2="95"/><JR M1="1" M2="96"/><JR M1="1" M2="88"/><JR M1="1" M2="94"/><JR M1="1" M2="93"/><JR M1="1" M2="41"/><JR M1="1" M2="63"/><JR M1="1" M2="43"/><JR M1="1" M2="64"/><JR M1="1" M2="44"/><JR M1="1" M2="85"/><JR M1="1" M2="78"/><JR M1="1" M2="80"/><JR M1="1" M2="80"/><JR M1="1" M2="84"/><JR M1="1" M2="122"/><JR M1="1" M2="123"/><JR M1="1" M2="83"/><JR M1="1" M2="79"/><JR M1="1" M2="79"/><JR M1="1" M2="89"/><JR M1="1" M2="91"/><JR M1="1" M2="76"/><JR M1="1" M2="105"/><JR M1="1" M2="99"/><JR M1="1" M2="98"/><JR M1="1" M2="100"/><JR M1="1" M2="72"/><JR M2="37"/><JR M2="47"/><JR M2="62"/><JR M2="51"/><JR M2="58"/><JR M2="57"/><JR M2="50"/><JR M2="40"/><JR M2="39"/><JR M2="59"/><JR M2="52"/><JR M2="48"/><JR M2="56"/><JR M2="34"/><JR M2="55"/><JR M2="49"/><JR M2="53"/><JR M2="60"/><JR M2="54"/><JR M2="61"/><JR M1="2" M2="45"/><JR M2="38"/><JR M1="2" M2="107"/><JR M1="1" M2="42"/><JR M1="1" M2="75"/><JR M1="1" M2="77"/><JR M1="1" M2="46"/><JR M1="1" M2="74"/><JR M1="1" M2="71"/><JR M1="1" M2="73"/><JR M1="1" M2="66"/><JR M1="1" M2="33"/></L></Z></C>]],
		[[<C><P dodue="" L="3000" H="800" author="Bolodefchoco#0015" sections="0,540,1100,265,1100,455,970,370,2150,40,870,770,590,70,1565,390" DS="m;645,741,1643,730,2436,264" name="Twinsanity Island" foreground="17f133736f1.png,2466,140" background="17f13742251.png" D="x_transformice/x_evt/x_evt_06/jobnpcgy/arbre.png,1382,463;x_transformice/x_evt/x_evt_06/jobnpcgy/arbre.png,1095,461;x_bouboum/x_fond/x_f0.jpg,2510,268;x_bouboum/x_fond/x_f0.jpg,2400,324;x_bouboum/x_fond/x_f0.jpg,2209,467;x_bouboum/x_fond/x_f0.jpg,2078,658" MEDATA=";;;;-0;0::0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42:1-" /><Z><S><S T="9" X="295" Y="784" L="590" H="50" P="0,0,0,0,0,0,0,0" despawn="1"/><S T="7" X="840" Y="781" L="500" H="50" P="1,99999,0.1,0.2,1,1,0,0" c="3"/><S T="7" X="591" Y="787" L="50" H="45" P="1,99999,0.1,0.2,-50,1,0,0" c="3"/><S T="7" X="485" Y="812" L="200" H="38" P="1,99999,0.1,0.2,-1,1,0,0" c="3"/><S T="5" X="1099" Y="772" L="50" H="50" P="1,99999,0.3,0.2,7245,1,0,0" c="3"/><S T="5" X="1194" Y="757" L="50" H="50" P="1,99999,0.3,0.2,125,1,0,0" c="3"/><S T="5" X="1263" Y="713" L="50" H="50" P="1,99999,0.3,0.2,75,1,0,0" c="3"/><S T="6" X="1531" Y="783" L="840" H="78" P="1,99999,0.3,0.2,-2,1,0,0" c="3"/><S T="5" X="1389" Y="679" L="40" H="40" P="1,99999,0.3,0.2,115,1,0,0" c="3"/><S T="5" X="1599" Y="722" L="50" H="50" P="1,99999,0.3,0.2,75,1,0,0" c="3"/><S T="10" X="1526" Y="617" L="40" H="40" P="1,99999,0.3,0,54,1,0,0" c="3"/><S T="10" X="1260" Y="597" L="40" H="40" P="1,99999,0.3,0,-6,1,0,0" c="3"/><S T="5" X="1140" Y="741" L="50" H="50" P="1,99999,0.3,0.2,75,1,0,0" c="3"/><S T="10" X="2242" Y="509" L="80" H="200" P="1,99999,0.3,0,10,1,0,0" c="3"/><S T="10" X="2960" Y="334" L="80" H="140" P="1,99999,0.3,0,0,1,0,0" c="3"/><S T="10" X="1748" Y="660" L="40" H="40" P="1,99999,0.3,0,-66,1,0,0" c="3"/><S T="11" X="2932" Y="318" L="94" H="86" P="1,99999,0.3,0.2,-50,1,0,0" c="3"/><S T="3" X="2329" Y="567" L="44" H="182" P="1,99999,0,20,20,1,0,0" c="3"/><S T="5" X="1667" Y="581" L="40" H="40" P="1,99999,0.3,0.2,165,1,0,0" c="3"/><S T="5" X="2118" Y="662" L="108" H="450" P="1,99999,0.3,0.2,50,1,0,0" c="3"/><S T="11" X="2695" Y="217" L="300" H="108" P="1,99999,0.3,0.2,30,1,0,0" c="3"/><S T="11" X="2471" Y="315" L="491" H="99" P="1,99999,0.3,0.2,-50,1,0,0" c="3"/><S T="5" X="2975" Y="577" L="108" H="500" P="1,99999,0.3,0.2,170,1,0,0" c="3"/><S T="5" X="2314" Y="475" L="108" H="450" P="1,99999,0.3,0.2,20,1,0,0" c="3"/><S T="9" X="2640" Y="721" L="88" H="668" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="9" X="2726" Y="940" L="88" H="668" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="9" X="2553" Y="1065" L="88" H="668" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="9" X="2912" Y="660" L="88" H="668" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="9" X="2305" Y="858" L="88" H="668" P="0,0,0,0,0,0,0,0" despawn="3"/><S T="5" X="2196" Y="781" L="332" H="38" P="1,99999,0.3,0.2,0,1,0,0" c="3"/><S T="13" X="2644" Y="276" L="114" P="1,99999,0.3,0.2,0,1,0,0" o="324650" c="3" N="" m=""/><S T="5" X="2474" Y="482" L="183" H="66" P="1,99999,0.3,0.2,10,1,0,0" c="3"/><S T="5" X="2794" Y="745" L="183" H="66" P="1,99999,0.3,0.2,-10,1,0,0" c="3"/><S T="5" X="2401" Y="622" L="183" H="66" P="1,99999,0.3,0.2,10,1,0,0" c="3"/><S T="13" X="2533" Y="211" L="50" P="1,99999,0.3,1.4,0,1,0,0" o="324650" c="3" N="" m=""/><S T="12" X="3251" Y="404" L="500" H="800" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="13" X="2753" Y="206" L="48" P="1,99999,0.3,0.2,0,1,0,0" o="324650" c="3" N="" m=""/><S T="13" X="1088" Y="344" L="40" P="1,99999,0.3,1,0,1,0,0" o="324650" c="3" m=""/><S T="13" X="704" Y="220" L="40" P="1,99999,0.3,0.2,0,1,0,0" o="324650" c="3" m=""/><S T="13" X="1669" Y="268" L="57" P="1,99999,0.3,1,0,1,0,0" o="324650" c="3" m=""/><S T="13" X="1978" Y="186" L="50" P="1,99999,0.3,1,0,1,0,0" o="324650" c="3" m=""/><S T="12" X="1137" Y="355" L="216" H="29" P="1,99999,0.1,0.2,0,1,0,0" o="324650" c="3" m=""/><S T="12" X="1619" Y="253" L="216" H="29" P="1,99999,0.1,0.2,0,1,0,0" o="324650" c="3" m=""/><S T="12" X="2029" Y="182" L="216" H="29" P="1,99999,0.1,0.2,0,1,0,0" o="324650" c="3" m=""/><S T="12" X="750" Y="229" L="216" H="29" P="1,99999,0.1,0.2,0,1,0,0" o="324650" c="3" m=""/><S T="12" X="1307" Y="390" L="61" H="94" P="1,99999,0.1,0.2,50,1,0,0" o="324650" c="3" m=""/><S T="12" X="1274" Y="390" L="61" H="94" P="1,99999,0.1,0.2,-40,1,0,0" o="324650" c="3" m=""/><S T="7" X="-25" Y="814" L="211" H="70" P="1,99999,0.1,0.2,150,1,0,0" c="3"/><S T="7" X="89" Y="811" L="82" H="159" P="1,99999,0.1,0.2,0,1,0,0" c="3"/><S T="7" X="173" Y="825" L="198" H="56" P="1,99999,0.1,0.2,50,1,0,0" c="3"/><S T="12" X="346" Y="508" L="10" H="10" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="1"/><S T="12" X="1531" Y="456" L="10" H="10" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="2"/><S T="12" X="-250" Y="519" L="500" H="800" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="12" X="1602" Y="1044" L="3516" H="488" P="0,0,0.3,0.2,0,0,0,0" o="6A7495" c="4"/><S T="12" X="2905" Y="171" L="10" H="10" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="3"/><S T="12" X="1332" Y="160" L="10" H="10" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="4"/></S><D><P X="508" Y="793" T="85" C="824b8e" P="0,0" egg=""/><P X="157" Y="805" T="84" P="0,0"/><P X="418" Y="797" T="83" P="0,0"/><P X="1765" Y="741" T="231" P="0,1" egg=""/><P X="792" Y="757" T="8" P="0,1" egg=""/><P X="880" Y="775" T="6" P="0,1"/><P X="890" Y="760" T="7" P="0,0"/><P X="1190" Y="726" T="4" P="0,0"/><P X="1470" Y="750" T="1" P="0,0"/><P X="1339" Y="886" T="1" P="0,1"/><P X="1617" Y="255" T="234" P="0,0" egg="0,-40"/><P X="1700" Y="760" T="1" P="0,0"/><P X="738" Y="564" T="155" P="0,0"/><P X="2023" Y="177" T="154" P="0,0"/><P X="1627" Y="246" T="154" P="0,1"/><P X="747" Y="221" T="154" P="0,0"/><P X="1603" Y="503" T="163" P="0,0"/><P X="1509" Y="746" T="195" P="0,0" egg=""/><P X="1523" Y="611" T="115" P="0,1" egg="0,-25"/><P X="1701" Y="844" T="1" P="0,1"/><P X="1656" Y="601" T="159" P="0,0"/><P X="1656" Y="651" T="159" P="0,0"/><P X="1398" Y="698" T="159" P="0,0"/><P X="1254" Y="615" T="159" P="0,0"/><P X="1254" Y="665" T="159" P="0,0"/><P X="1659" Y="562" T="178" P="0,0" egg=""/><P X="2970" Y="273" T="229" P="0,0" egg="3,-25"/><P X="2640" Y="129" T="201" P="0,0"/><P X="2720" Y="170" T="205" P="0,1"/><P X="2476" Y="224" T="226" P="0,0"/><P X="1916" Y="736" T="4" P="0,0"/><P X="2245" Y="410" T="106" P="0,0" egg=""/><P X="2553" Y="567" T="160" P="0,0"/><P X="2360" Y="645" T="159" P="0,0"/><P X="2360" Y="698" T="159" P="0,0"/><P X="2553" Y="527" T="159" P="0,0"/><P X="2799" Y="337" T="159" P="0,0"/><P X="2457" Y="446" T="173" P="0,0" egg=""/><P X="2191" Y="632" T="38" P="0,0" egg="0,100"/><P X="2822" Y="720" T="86" C="3F6549" P="0,0"/><P X="2451" Y="515" T="108" P="0,0"/><P X="1124" Y="350" T="154" P="0,0"/><P X="2887" Y="316" T="111" P="0,0"/><P X="2793" Y="720" T="88" P="0,1" egg="0,-15"/><P X="773" Y="213" T="222" P="0,0" egg=""/><P X="1105" Y="766" T="251" P="0,1"/><P X="2046" Y="167" T="260" P="0,0" egg=""/><P X="2068" Y="169" T="258" P="0,0"/><P X="2698" Y="509" T="43" P="0,0"/><P X="1191" Y="341" T="140" P="0,0" egg=""/><P X="1292" Y="388" T="225" P="0,0"/><P X="44" Y="744" T="6" P="0,1"/><P X="82" Y="739" T="80" P="0,0" egg="5"/><P X="184" Y="502" T="155" P="0,0"/><P X="1256" Y="577" T="242" P="0,0" egg=""/><P X="2799" Y="383" T="160" P="0,0"/><P X="2390" Y="588" T="232" P="0,0" egg="0,-20"/><P X="2273" Y="417" T="116" P="0,0"/><P X="2407" Y="281" T="149" P="0,0"/><P X="2480" Y="600" T="161" P="0,0"/><P X="2360" Y="755" T="161" P="0,0"/><DS X="645" Y="741"/></D><O/><L><JR M1="47" M2="50"/><JR M1="49" M2="50"/><JR M1="48" M2="50"/><JR M1="1" M2="50"/><JR M1="2" M2="50"/><JR M1="3" M2="50"/><JR M1="4" M2="51"/><JR M1="10" M2="51"/><JR M1="11" M2="51"/><JR M1="12" M2="51"/><JR M1="5" M2="51"/><JR M1="6" M2="51"/><JR M1="8" M2="51"/><JR M1="18" M2="51"/><JR M1="15" M2="51"/><JR M1="9" M2="51"/><JR M1="7" M2="51"/><JR M1="36" M2="54"/><JR M1="14" M2="54"/><JR M1="16" M2="54"/><JR M1="22" M2="54"/><JR M1="30" M2="54"/><JR M1="20" M2="54"/><JR M1="21" M2="54"/><JR M1="23" M2="54"/><JR M1="13" M2="54"/><JR M1="19" M2="54"/><JR M1="33" M2="54"/><JR M1="29" M2="54"/><JR M1="32" M2="54"/><JR M1="45" M2="55"/><JR M1="46" M2="55"/><JR M1="41" M2="55"/><JR M1="37" M2="55"/><JR M1="39" M2="55"/><JR M1="42" M2="55"/><JR M1="40" M2="55"/><JR M1="43" M2="55"/><JR M1="44" M2="55"/><JR M1="38" M2="55"/><JR M1="17" M2="54"/><JR M1="34" M2="54"/><JR M1="31" M2="54"/></L></Z></C>]],
		[[<C><P dodue="" L="1200" F="7" MEDATA="36,1;;;;-0;0::0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37:1-" sections="0,0,400,400,400,0,400,400,800,0,400,400" name="Grass Biomes" author="Zetdey#3845"/><Z><S><S T="1" X="656" Y="362" L="154" H="10" P="1,999999,0,0.2,30,1,0,0" c="3"/><S T="17" X="715" Y="431" L="160" H="120" P="1,999999,0.3,0.2,360,1,0,0" c="3"/><S T="1" X="386" Y="48" L="94" H="10" P="1,999999,0,0.2,90,1,0,0" c="3"/><S T="6" X="281" Y="397" L="80" H="160" P="1,999999,0.3,0.2,90,1,0,0" c="3"/><S T="6" X="186" Y="397" L="160" H="30" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="17" X="630" Y="418" L="160" H="120" P="1,999999,0.3,0.2,390,1,0,0" c="3"/><S T="13" X="126" Y="407" L="44" P="1,99999,0,1,0,1,0,0" o="6d4e94" c="3"/><S T="6" X="251" Y="182" L="120" H="30" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="271" Y="207" L="160" H="20" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="6" X="10" Y="80" L="160" H="20" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="6" X="382" Y="40" L="80" H="10" P="1,999999,0.3,0.2,90,1,0,0" c="3"/><S T="18" X="920" Y="100" L="40" H="40" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="6" X="40" Y="145" L="80" H="30" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="6" X="40" Y="340" L="80" H="160" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="6" X="347" Y="81" L="80" H="30" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="6" X="208" Y="87" L="40" H="20" P="1,999999,0.3,0.2,-180,1,0,0" c="3"/><S T="13" X="1098" Y="407" L="44" P="1,99999,0,1.2,0,1,0,0" o="6d4e94" c="3"/><S T="17" X="513" Y="397" L="80" H="120" P="1,999999,0.3,0.2,-90,1,0,0" c="3"/><S T="13" X="406" Y="407" L="44" P="1,99999,0,1.2,0,1,0,0" o="6d4e94" c="3"/><S T="17" X="559" Y="104" L="40" H="40" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="576" Y="397" L="160" H="30" P="1,999999,0.3,0.2,90,1,0,0" c="3"/><S T="18" X="967" Y="397" L="80" H="160" P="1,999999,0.3,0.2,-90,1,0,0"/><S T="18" X="1037" Y="397" L="160" H="30" P="1,999999,0.3,0.2,90,1,0,0"/><S T="17" X="533" Y="234" L="160" H="20" P="1,999999,0.3,0.2,-180,1,0,0" c="3"/><S T="17" X="572" Y="214" L="80" H="20" P="1,999999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="519" Y="124" L="120" H="20" P="1,999999,0.3,0.2,-180,1,0,0" c="3"/><S T="17" X="689" Y="124" L="80" H="20" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="18" X="1172" Y="331" L="200" H="56" P="1,999999,0.3,0.2,270,1,0,0" c="3"/><S T="17" X="754" Y="220" L="80" H="30" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="4" X="789" Y="175" L="10" H="120" P="1,999999,20,0.2,0,1,0,0" c="3"/><S T="13" X="841" Y="407" L="44" P="1,99999,0,1.2,0,1,0,0" o="6d4e94" c="3"/><S T="18" X="992" Y="244" L="120" H="20" P="1,999999,0.3,0.2,180,1,0,0" c="3"/><S T="18" X="921" Y="254" L="40" H="40" P="1,999999,0.3,0.2,540,1,0,0" c="3"/><S T="12" X="605" Y="567" L="1212" H="332" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4"/><S T="18" X="1011" Y="140" L="40" H="20" P="1,999999,0.3,0.2,450,1,0,0" c="3"/><S T="18" X="961" Y="130" L="120" H="20" P="1,999999,0.3,0.2,540,1,0,0" c="3"/><S T="18" X="1160" Y="151" L="80" H="20" P="1,999999,0.3,0.2,900,1,0,0" c="3"/><S T="18" X="1190" Y="80" L="160" H="20" P="1,999999,0.3,0.2,810,1,0,0" c="3"/><S T="18" X="1078" Y="72" L="40" H="20" P="1,999999,0.3,0.2,720,1,0,0" c="3"/><S T="12" X="565" Y="-4" L="3000" H="10" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="3"/><S T="12" X="1250" Y="205" L="100" H="414" P="0,0,0.3,0.2,0,0,0,0" o="6a7495" c="4"/><S T="12" X="1318" Y="91" L="47" H="52" P="1,-1,0.3,0.2,0,1,0,0" o="324650" m="" lua="1"/><S T="12" X="1398" Y="91" L="47" H="52" P="1,-1,0.3,0.2,0,1,0,0" o="324650" m="" lua="2"/><S T="12" X="1478" Y="91" L="47" H="52" P="1,-1,0.3,0.2,0,1,0,0" o="324650" m="" lua="3"/></S><D><P X="30" Y="260" T="0" P="0,0" egg=""/><P X="128" Y="529" T="1" P="0,0"/><P X="670" Y="115" T="103" C="714330,23130c" P="0,0" egg=""/><P X="39" Y="130" T="103" C="714330,23130c" P="0,0" egg=""/><P X="290" Y="166" T="5" P="0,0"/><P X="332" Y="355" T="4" P="0,0"/><P X="475" Y="223" T="88" P="0,1" egg=""/><P X="1173" Y="230" T="103" C="714330,23130c" P="0,0" egg=""/><P X="505" Y="114" T="83" P="0,0"/><P X="513" Y="358" T="83" P="0,0"/><P X="745" Y="375" T="80" P="0,1"/><P X="97" Y="319" T="221" P="0,0"/><P X="943" Y="223" T="217" P="0,0"/><P X="214" Y="77" T="3" P="0,0"/><P X="731" Y="204" T="106" P="0,1"/><P X="344" Y="66" T="211" P="0,0" egg=""/><P X="981" Y="347" T="217" P="0,1" egg=""/><P X="978" Y="127" T="165" C="f2aaeb" P="0,1"/><P X="1075" Y="62" T="132" P="0,0" egg=""/><P X="1213" Y="227" T="148" P="0,0"/><DS X="259" Y="342"/></D><O/><L><JR M1="41" M2="9"/><JR M1="41" M2="12"/><JR M1="41" M2="13"/><JR M1="41" M2="7"/><JR M1="41" M2="4"/><JR M1="41" M2="8"/><JR M1="41" M2="14"/><JR M1="41" M2="10"/><JR M1="41" M2="2"/><JR M1="41" M2="3"/><JR M1="42" M2="25"/><JR M1="42" M2="19"/><JR M1="42" M2="24"/><JR M1="42" M2="23"/><JR M1="42" M2="17"/><JR M1="42" M2="20"/><JR M1="42"/><JR M1="42" M2="5"/><JR M1="42" M2="1"/><JR M1="42" M2="28"/><JR M1="42" M2="29"/><JR M1="42" M2="26"/><JR M1="43" M2="11"/><JR M1="43" M2="35"/><JR M1="43" M2="34"/><JR M1="43" M2="38"/><JR M1="43" M2="37"/><JR M1="43" M2="27"/><JR M1="43" M2="22"/><JR M1="43" M2="21"/><JR M1="41" M2="6"/><JR M1="41" M2="18"/><JR M1="42" M2="30"/><JR M1="43" M2="16"/><JR M1="43" M2="31"/><JR M1="43" M2="32"/><JR M1="43" M2="36"/><JR M1="41" M2="15"/></L></Z></C>]],
		[[<C><P name="Tourmaline Cliffs" author="Eremia#2246" sections="540,0,360,440,90,310,440,470,1350,530,460,480,910,350,430,410" L="1900" H="1000" F="0" DS="m;380,510,610,270,850,70,1260,530,1420,750,1660,710" dodue="" /><Z><S><S T="12" X="-59" Y="-106" L="82" H="37" P="0,-1,0.3,0.2,0,0,0,0" o="6a7495" c="4"/><S T="11" X="140" Y="620" L="40" H="40" P="1,9999,0.05,0.2,0,1,0,0" c="3"/><S T="11" X="160" Y="500" L="80" H="40" P="1,9999,0.05,0.2,0,1,0,0" c="3"/><S T="5" X="160" Y="380" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="11" X="200" Y="580" L="80" H="40" P="1,9999,0.05,0.2,0,1,0,0" c="3"/><S T="11" X="440" Y="660" L="160" H="40" P="1,9999,0.05,0.2,0,1,0,0" c="3"/><S T="5" X="280" Y="640" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="11" X="480" Y="620" L="80" H="40" P="1,9999,0.05,0.2,0,1,0,0" c="3"/><S T="11" X="380" Y="540" L="40" H="40" P="1,9999,0.05,0.2,0,1,0,0" c="3"/><S T="5" X="280" Y="440" L="80" H="80" P="1,9999,0.3,0.2,180,1,0,0" c="3"/><S T="11" X="380" Y="420" L="40" H="40" P="1,9999,0.05,0.2,0,1,0,0" c="3"/><S T="11" X="500" Y="580" L="40" H="40" P="1,9999,0.05,0.2,0,1,0,0" c="3"/><S T="5" X="480" Y="480" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="12" X="250" Y="-90" L="20" H="20" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="2"/><S T="12" X="710" Y="-90" L="20" H="20" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="1"/><S T="12" X="1115" Y="-90" L="20" H="20" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="4"/><S T="12" X="1540" Y="-90" L="20" H="20" P="1,-1,0.3,0.2,0,1,0,0" o="324650" c="4" m="" lua="3"/><S T="10" X="570" Y="220" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="610" Y="120" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="690" Y="200" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="610" Y="300" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="630" Y="400" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="730" Y="340" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="770" Y="300" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="770" Y="140" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="730" Y="220" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="850" Y="260" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="850" Y="360" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="10" X="850" Y="100" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1020" Y="520" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1300" Y="440" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1160" Y="480" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="1020" Y="420" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1240" Y="560" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="1120" Y="540" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="980" Y="600" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="1220" Y="620" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="1240" Y="720" L="160" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="5" X="1180" Y="400" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1100" Y="680" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="17" X="1020" Y="660" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1580" Y="640" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1540" Y="780" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1660" Y="760" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1540" Y="860" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1500" Y="700" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1520" Y="940" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1420" Y="960" L="40" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1380" Y="860" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1440" Y="780" L="80" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1620" Y="900" L="40" H="40" P="1,9999,0.3,0.2,0,1,0,0" c="3"/><S T="18" X="1720" Y="880" L="80" H="80" P="1,9999,0.3,0.2,0,1,0,0" c="3"/></S><D><P X="283" Y="601" T="212" P="0,0" egg=""/><P X="153" Y="481" T="212" P="0,0" egg=""/><P X="407" Y="641" T="208" P="0,0" egg=""/><P X="301" Y="401" T="208" P="0,0" egg=""/><P X="160" Y="361" T="194" P="0,0" egg=""/><P X="463" Y="442" T="196" P="0,0" egg=""/><P X="725" Y="325" T="98" C="55300B,191812" P="0,0" egg=""/><P X="609" Y="83" T="97" C="807E7D,E9E2DA" P="0,0" egg=""/><P X="849" Y="243" T="97" C="807E7D,E9E2DA" P="0,0" egg=""/><P X="649" Y="360" T="100" C="018585" P="0,0" egg=""/><P X="848" Y="322" T="113" P="0,0" egg=""/><P X="1100" Y="663" T="149" P="0,0" egg=""/><P X="1260" Y="703" T="149" P="0,0" egg=""/><P X="980" Y="580" T="134" P="0,0" egg=""/><P X="1300" Y="421" T="165" C="86B434" P="0,0" egg=""/><P X="1236" Y="547" T="170" P="0,0" egg=""/><P X="1735" Y="845" T="148" P="0,0" egg=""/><P X="1430" Y="925" T="148" P="0,0" egg=""/><P X="1496" Y="682" T="85" C="C988BC" P="0,0" egg=""/><P X="1617" Y="884" T="85" C="C988BC" P="0,0" egg=""/><P X="196" Y="643" T="79" P="0,0"/><P X="286" Y="513" T="79" P="0,1"/><P X="379" Y="659" T="247" P="0,0"/><P X="1020" Y="689" T="159" P="0,0"/><P X="1142" Y="569" T="159" P="0,0"/><P X="1751" Y="889" T="217" P="0,0"/><P X="1492" Y="955" T="217" P="0,0"/><P X="570" Y="200" T="103" C="714330,23130C" P="0,0" egg=""/><P X="1580" Y="620" T="228" P="0,0" egg=""/></D><O/><L><JD c="6a7495,200,1,0" P1="-100,1200" P2="-100,0"/><JD c="6a7495,200,1,0" P1="2000,1200" P2="2000,0"/><JR M1="1" M2="13"/><JR M1="3" M2="13"/><JR M1="2" M2="13"/><JR M1="9" M2="13"/><JR M1="10" M2="13"/><JR M1="8" M2="13"/><JR M1="12" M2="13"/><JR M1="4" M2="13"/><JR M1="6" M2="13"/><JR M1="5" M2="13"/><JR M1="7" M2="13"/><JR M1="11" M2="13"/><JR M1="17" M2="14"/><JR M1="21" M2="14"/><JR M1="20" M2="14"/><JR M1="19" M2="14"/><JR M1="22" M2="14"/><JR M1="23" M2="14"/><JR M1="24" M2="14"/><JR M1="25" M2="14"/><JR M1="26" M2="14"/><JR M1="27" M2="14"/><JR M1="28" M2="14"/><JR M1="40" M2="15"/><JR M1="32" M2="15"/><JR M1="29" M2="15"/><JR M1="39" M2="15"/><JR M1="38" M2="15"/><JR M1="34" M2="15"/><JR M1="35" M2="15"/><JR M1="37" M2="15"/><JR M1="40" M2="15"/><JR M1="36" M2="15"/><JR M1="33" M2="15"/><JR M1="31" M2="15"/><JD c="6a7495,200,1,0" P1="1800,1100" P2="0,1100"/><JR M1="41" M2="16"/><JR M1="45" M2="16"/><JR M1="43" M2="16"/><JR M1="49" M2="16"/><JR M1="42" M2="16"/><JR M1="51" M2="16"/><JR M1="44" M2="16"/><JR M1="46" M2="16"/><JR M1="47" M2="16"/><JR M1="48" M2="16"/><JR M1="50" M2="16"/><JR M1="18" M2="14"/><JR M1="30" M2="15"/></L></Z></C>]],
	}
}
module.timeLeftForNPCPlus5 = module.timeLeftForNPC + 5
module.timeLeftForNPCPlus5InMs = module.timeLeftForNPCPlus5 * 1000

if not tfm.get.room.playerList[module.team.developer]
	and (tfm.get.room.uniquePlayers < module.minPlayers
		or tfm.get.room.uniquePlayers > module.maxPlayers) then
	return system.exit()
end

math.randomseed(time())
system.luaEventLaunchInterval(45, 10)
system.setLuaEventBanner(15)

--[[ Translations ]]--
local translation
do
	local translations = {
		en = {
			greetingByProgress = {
				[0] = "<CH>Welcome to the <CEP><i>Rabbit's Skull Archipelago</i></CEP>, sailormouse.\n\nMost brave mice who tried to get into our <b>magical jungle</b> never lived to tell the tale.\n\nI'm <b>Neige</b>, and I can take you out of here if you explore and bring me the <CEP><i>Lost Eggs of Easter</i></CEP> - ancient, magical eggs that lie around the islands!",
				[1] = "<CH>Well, well, well... Some bushes later, look who's back with some shiny eggs.\n\nI have to admit I am quite impressed with your performance so far. How come have you survived all traps?",
				[2] = "<CH>You are definitely a true legend. Hand me these magical eggs and you shall be greatly gifted for that!",
				[3] = "<CEP>Arrrrr, you got them all\n<CH><i>It's time to use th-...</i> To take you back home!"
			},
			rewardMessage = {
				[2] = "<J>Arrr! Don't be spending all your gold yet! You may meet a NPC soon for some chests instead!"
			},
			credits = "<CEP>Easter eggs only were possible thanks to the pirate developer <CH>%s</CH>, the artists worth their weight in gold <CH>%s</CH> and the ideas of the explorer <CH>%s</CH>."
		},
		br = {
			greetingByProgress = {
				[0] = "<CH>Bem-vindo ao <CEP><i>Arquipélago do Crânio do Coelho</i></CEP>, marinheiro.\n\nOs ratos mais corajosos que tentaram entrar em nossa <b>floresta mágica</b> nunca sobreviveram para contar a história.\n\nMe chamo <b>Neige</b>, e posso te tirar daqui se você explorar e me trouxer os <CEP><i>Ovos de Páscoa Perdidos</i></CEP> - ovos antigos e mágicos que estão espalhados pela ilha!",
				[1] = "<CH>Ora, ora, ora... Alguns arbustos depois, olha quem voltou com alguns ovos brilhantes.\n\nTenho que admitir que estou impressionado com o seu desempenho até agora. Como você sobreviveu a todas essas armadilhas?",
				[2] = "<CH>Definitivamente você é uma lenda viva. Me dê estes ovos mágicos e você receberá ótimas recompensas por isso!",
				[3] = "<CEP>Arrrrr, você pegou todos eles\n<CH><i>É hora de usá-los pro-...</i> Hora de te levar pra casa!"
			},
			rewardMessage = {
				[2] = "<J>Arrr! Não gaste todo o seu ouro ainda! Você pode encontrar um NPC em breve para alguns comprar alguns baús!"
			},
			credits = "<CEP>Os ovos de páscoa só foram possíveis graças ao desenvolvedor pirata <CH>%s</CH>, aos artitas que valem seu peso em ouro <CH>%s</CH> e as ideias do explorador <CH>%s</CH>."
		},
		es = {
			greetingByProgress = {
				[0] = "<CH>Bienvenido al <CEP><i>Archipiélago Cráneo de Conejo</i></CEP>, marinero.\n\nLos ratones más valientes que intentaron entrar a nuestra <b>jungla mágica</b> nunca sobrevivieron para contar sus aventuras.\n\nYo soy <b>Neige</b>, y te puedo sacar de aquí si exploras y me traes los <CEP><i>Huevos Perdidos de Pascua</i></CEP> - huevos viejos y magicos que están esparcidos por todas las islas!",
				[1] = "<CH>¡Miren quien volvió con unos brillantes huevos!\n\nDebo admitir que estoy impresionada con tu progreso hasta ahora. ¿Como pudiste pasar todas esas trampas?",
				[2] = "<CH>Eres definitivamente una verdadera leyenda. ¡Pásame esos huevos mágicos y recibiras grandes recompensas por lo que has hecho!",
				[3] = "<CEP>Arrrrr, los conseguiste a todos\n<CH>¡<i>Es hora de usar los-...</i> De llevarte de vuelta a casa!"
			},
			rewardMessage = {
				[2] = "<J>¡Arrr! ¡No gastes todo tu oro aún! ¡Puedes encontrarte con un NPC pronto que te lo cambiará por cofres!"
			},
			credits = "<CEP>Los huevos de Pascua fueron posible gracias al desarrollador pirata <CH>%s</CH>, los artistas que valen su peso en oro <CH>%s</CH> y las ideas del aventurero <CH>%s</CH>."
		},
 		fr = {
			greetingByProgress = {
				[0] = "<CH>Bienvenue à <CEP><i>L'archipel de Crânes du Lapin</i></CEP>, souris navigatrice.\n\nLes plus courageuses souris qui ont tenté d'entrer dans notre <b>jungle magique</b> n'ont pas pu s'en sortir pour pouvoir raconter leur aventure.\n\nJe m'appelle <b>Neige</b>, et je peux te sortir d'ici si tu pars en exploration pour m'apporter les <CEP><i>Oeufs de Pâques Perdus</i></CEP> - anciens oeufs magiques qui se retrouvent sur ces îles!",
				[1] = "<CH>Bon! Après avoir cherché dans quelques buissons, voilà qui m'apporte des oeufs brillants. \n\nJe dois admettre que ta performance jusqu'à maintenant m'impressionne. Comment as-tu pu survivre aux pièges?",
				[2] = "<CH>Tu es une souris légendaire. Après que tu m'apporteras les oeufs magiques, je vais te récompenser généreusement!",
				[3] = "<CEP>Arrrrr, tu les a tous trouvés\n<CH><i>Il est temps de les utiliser-...</i> Euh, de te porter chez toi!"
			},
			rewardMessage = {
				[2] = "<J>Arrr! Ne dépense pas déjà tout ton or! Tu pourras peut-être rencontrer un NPC bientôt pour des coffres!"
			},
			credits = "<CEP>Les Oeufs de Pâques ont été réalisés grâce au dévélopeur pirate <CH>%s</CH>, les artistes qui valent leur poids en or <CH>%s</CH> et les idées de l'explorateur <CH>%s</CH>."
		},
		it = {
			greetingByProgress = {
				[0] = "<CH>Benvenuto nell'<CEP><i>Arcipelago dei Teschi di Coniglio</i></CEP>, marinaio.\n\nI topi più coraggiosi che hanno cercato di entrare nella nostra <b>giungla magica</b> non sono mai tornati sani e salvi per raccontarne la storia .\n\nSono <b>Neige</b> e posso portarti fuori di qui se esplorerai e mi porterai le <CEP><i>Uova Perdute di Pasqua</i></CEP> - uova antiche e magiche che giacciono intorno alle isole!",
				[1] = "<CH>Bene, bene, bene... Dopo qualche cespuglio e rovo, guarda chi è tornato con delle uova luccicanti.\n\nDevo ammettere che sono rimasto abbastanza colpito dalla tua performance finora. Come sei sopravvissuto a tutte le trappole?",
				[2] = "<CH>Sei di certo una vera leggenda. Passami queste uova magiche e sarai altamente ricompensato!",
				[3] = "<CEP>Arrrrr, le hai tutte\n<CH><i>È ora di usare le...</i> Per riportarti a casa!"
			},
			rewardMessage = {
				[2] = "<J>Arrr! Non spendere ancora tutto il tuo oro! Potresti incontrare presto un NPC per alcuni forzieri!"
			},
			credits = "<CEP>Questo evento è stato possibile solo grazie allo sviluppatore pirata <CH>%s</CH>, gli artisti che valgono tutto l'oro del mondo <CH>%s</CH> e le idee dell'esploratore <CH>%s</CH>."
		},
		hu = {
			greetingByProgress = {
				[0] = "<CH>Üdv a <CEP><i>Nyúl Koponya Szigeteken</i></CEP>, kalandor!\n\nA legtöbb félelmet nem ismerő egér, aki be merészelt lépni az <b>elvarázsolt rengetegbe</b> sosem tért vissza közénk.\n\nÉn <b>Neige</b> vagyok, és biztonságban kivezetlek innen, ha elhozod nekem a <CEP><i>Húsvét Elveszett Tojásait</i></CEP> - ezek ősi, mágikus tojások a szigetek mélyén.",
				[1] = "<CH>Nos, nos, nos... Néhány bokorral később, nézzük ki tért vissza pár ékes tojással.\n\nHogy őszinte legyek, igazán lenyűgözött az eddigi teljesítményed. Hogy sikerült túlélned az összes csapdát?",
				[2] = "<CH>Egy igazi legenda vagy! Add át nekem a tojásokat, és bőségesen megjutalmazlak cserébe.",
				[3] = "<CEP>Arrrrr, hát mind megvan\n<CH><i>Itt az idő a s-...</i> Hogy hazavigyelek!"
			},
			rewardMessage = {
				[2] = "<J>Arrr! Nehogy egyből elköltsd az összes aranyad! Hamarosan találkozhatsz egy NPC-vel, akitől ládákat is vásárolhatsz!"
			},
			credits = "<CEP>A húsvéti szigetek rejtelmei nem valósulhattak volna meg a programozó <CH>%s</CH>, a minden aranyat megérő művész <CH>%s</CH> és a kalandozó lelkű ötletgazda <CH>%s</CH> nélkül."
		},
		ru = {
			greetingByProgress = {
				[0] = "<CH> Добро пожаловать на <CEP><i>Архипелаг Кроличьего Черепа</i></CEP>, матрос.\n\nБольшинство храбрых мышей которые пытались проникнуть в наши <b>магические джунгли</b> не вернулись чтобы поведать историю.\n\nЯ <b>Neige</b>, и я могу вывести тебя отсюда если ты отыщешь и принесёшь мне <CEP><i>Потерянные Пасхальные Яйца</i></CEP> - древние, магические яйца спрятанные на остравах!",
				[1] = "<CH>Так, так, так... Пара кустов спустя, смотри кто пришёл с корзиной блестящих яиц.\n\nЯ вынуждена признать я удивлена твоим успехом. Как же ты прошёл(ла) мимо всех ловушек?",
				[2] = "<CH>Ты действительно живая легенда. Дай-ка мне те магические яйца и ты получишь щедрую награду!",
				[3] = "<CEP>Арррр, ты собрал(а) их всех.\n<CH><i>Пора использ-...</i> провести тебя домой!"
			},
			rewardMessage = {
				[2] = "<J>Аррр! Не трать своё золото так быстро! Ты скоро встретишь одного NPC чтобы купить сундук!"
			},
			credits = "<CEP>Пасхальная охота на яйца была возможна только благодаря разработчику-пирату <CH>%s</CH>, артистам стоящих золота <CH>%s</CH> и идеям разветчика <CH>%s</CH>."
		},
		ro = {
			greetingByProgress = {
				[0] = "<CH>Bine ai venit pe <CEP><i>Arhipelagul Craniilor al Iepurelui</i></CEP>, șoricel marinar.\n\nCei mai viteji șoricei care au încercat să intre în <b>jungla noastră magică</b> nu au supraviețuit pentru a putea povesti.\n\nSunt <b>Neige</b>, și te pot scoate de aici dacă poți explora arhipelagul pentru a-mi aduce <CEP><i>Ouăle de Paști Pierdute</i></CEP> - antice ouă magice aflate pe aceste insule!",
				[1] = "<CH>Măi, măi, măi... După căutarea printre tufișuri, uite cine a revenit cu niște ouă strălucite.\n\nTrebuie să recunosc că sunt impresionată de performanța ta. Cum de ai supraviețuit capcanelor?",
				[2] = "<CH>Ești un șoricel legendar. După ce-mi aduci ouăle magice te voi recompensa generos!",
				[3] = "<CEP>Arrrrr, le-ai adunat pe toate\n<CH><i>Acum, pot să le folosesc-...</i> Adică, să te duc acasă!"
			},
			rewardMessage = {
				[2] = "<J>Arrr! Nu-ți cheltui deja tot aurul! Poate vei întâlni un NPC în curând pentru niște comori!"
			},
			credits = "<CEP>Ouăle de paști sunt realizate datorită dezvoltatorului pirat <CH>%s</CH>, artiștii care-și merită greutatea în aur <CH>%s</CH> și ideile exploratorului <CH>%s</CH>."
		},
		pl = {
			greetingByProgress = {
				[0] = "<CH>Witamy w <CEP><i>Archipelagu Króliczej Czaszki </i></CEP>, marynarzu.\n\nNajodważniejsze myszki, które próbowały się dostać do naszej <b>magicznej dżungli</b> nie przeżyły, by opowiedzieć tę historię.\n\nJestem <b>Neige</b> i mogę Cię stąd zabrać, jeśli odkryjesz i przyniesiesz mi <CEP><i>zaginione jajka Wielkanocy</i></CEP> - starożytne, magiczne jajka, które leżą wokół wysp!",
				[1] = "<CH>No, no, no…Trochę czasu minęło, zobacz kto wrócił z błyszczącymi jajkami.\n\nMuszę przyznać, że do tej pory jestem pod dużym wrażeniem Twoich umiejętności. Jak to się stało, że udało Ci się pokonać wszystkie pułapki?",
				[2] = "<CH>Zdecydowanie jesteś prawdziwą legendą. Podaj mi te magiczne jajka, a będziesz za to wielce nagrodzony!",
				[3] = "<CEP>Arrrrr, zebrałeś wszystkie jajka\n<CH><i>Nadszedł czas, by użyć ja-...</i> By zabrać Cię do domu!" -- "It's time to use (the eggs for the evil)", but cut it in the middle so they don't get it. As if the evil plan was a plot for another series season. Then "...", then "To bring you back home"
			},
			rewardMessage = {
				[1] = "<J>Arrr! Nie wydawaj jeszcze całego swojego złota! Niedługo możesz spotkać się z NPC, by wymienić je na skrzynie!"
			},
			credits = "<CEP>Wielkanocne jajka były możliwe tylko dzięki pirackiemu programiście <CH>%s</CH>, artystom na wagę złota <CH>%s</CH> i pomysłom odkrywcy <CH>%s</CH>."
		},
		tr = {
			greetingByProgress = {
				[0] = "<CH>Denizci fareler, <CEP><i>Tavşan Kafatası Adaları</i></CEP>'na hoş geldiniz.\n\n<b>Sihirli ormanımıza</b> girmeyi deneyen en cesur farelerin hiçbiri hikayelerini anlatabilecek kadar yaşayamadı.\n\nBen <b>Neige</b> ve eğer burayı keşfederek bana <CEP><i>Paskalya’nın Kayıp Yumurtaları</i></CEP>’nı -adanın etrafında bulunan antik, sihirli yumurtaları- getirirsen seni buradan kurtarabilirim!",
				[1] = "<CH>Vay, vay, vay… Birkaç çalıdan sonra, bakın parlak yumurtalarla birlikte kim gelmiş.\n\nŞimdiye kadarki performansından ötürü oldukça etkilendiğimi kabul etmeliyim. Tüm bu tuzakları atlatmayı nasıl başarabildin?",
				[2] = "<CH>Sen kesinlikle gerçek bir efsane olmalısın. Sihirli yumurtaları bana ver ki bunun için bol miktarda ödülllendirilebilesin!",
				[3] = "<CEP>Arrrrr, hepsini topladın\n<CH><i>Şimdi sıra onları amacımız için kullanma vakti, k-…</i> kolaylıklıkla eve dönebilmek için!"
			},
			rewardMessage = {
				[2] = "<J>Arrr! Bütün altınını hemen harcama! İlerleyen zamanlarda sandık elde edebileceğin bir NPC ile karşılaşabilirsin!"
			},
			credits = "<CEP>Paskalya yumurtaları, sadece geliştirici korsan <CH>%s</CH>, ağırlığınca altını hak eden çizerler <CH>%s</CH> ve kaşif <CH>%s</CH>’ın fikirleri sayesinde gerçekleştirilebildi."
		},
		ar = {
			greetingByProgress = {
				[0] = "<CEP><i>ارخبيل جزر جمجمة الأرنب</i> <CH>مرحبا بك في </CEP> \n\n <b>الغابة السحرية</B> ايها الفأر البحار ,معظم الفأران الشجاعة التي حاولت الدخول لـ \n\n .لم يعيشوا ليحكوا الحكاية \n\n وانا استطيع اخراجك من هنا اذا بحثت واحضرت لي <b>الأرنب نيج</b> انا \n\n ! البيض السحري القديم الذي يقع حول الجزر <CEP><i>بيض عيد الفصح المفقود</i></CEP>",
				[1] = "<CH>.حسنا.. بعد البحث بين الشجيرات, انظر إلى من عاد مع بعض البيض اللامع \n\n يجب أن أعترف أنني معجب جدًا بأدائك حتى الآن. كيف نجوت من كل الفخاخ؟",
				[2] = "<CH>! أنت بالتأكيد أسطورة حقيقية.سلمني هذا البيض السحري وسوف أكافئك",
				[3] = "<CEP>مذهل... لقد حصلت عليها جميعًا \n<CH> <i>! حان الوقت لاستخدام الـ... </i> لإعادتك إلى المنزل"
			},
			rewardMessage = {
				[2] = "<J>. لا تنفق كل ما تجمعه من الذهب حتى الآن \n\n! سوف تقابل شخصية من اللعبة قريبًا لتبادله مع كنز بدلاً من ذلك"
			},
			credits = "<CEP><CH>٪s</CH> كان عيد الفصح ممكنًا فقط بفضل المطور القرصان \n\n <CH>٪s</CH> والفنانين الذين يستحقون وزنهم ذهب\n\n <CH>٪s</CH> وأفكار المستكشف"
		},
	}
	translation = translations[tfm.get.room.community] or translations.en

	translation.credits = str_format(translation.credits, module.team.developer,
		tbl_concat(module.team.artist, "</CH>, <CH>"), module.team.creative)
end

--[[ Enums ]]--
local interfaceId = {
	callback = 100,
	formula = 200,
	inventory = 300,
}

--[[ Data ]]--
-- Laagaadoo's DataHandler
local DataHandler, playerCache = { }, { }
do
	DataHandler.__index = DataHandler

	DataHandler.new = function(moduleID, structure)
		local structureIndexes = { }
		for k, v in next, structure do
			structureIndexes[v.index] = k
			v.type = v.type or type(v.default)
		end

		return setmetatable({
			playerData = { },
			moduleID = moduleID,
			structure = structure,
			structureIndexes = structureIndexes,
			otherPlayerData = { },
			hasDataChanged = { }
		}, DataHandler)
	end

	local extractPlayerData = function(self, dataStr)
		local i, module, j = str_match(dataStr, "()" .. self.moduleID .. "=(%b{})()")
		if i then
			return module, (str_sub(dataStr, 1, i - 1) .. str_sub(dataStr, j + 1))
		end
		return nil, dataStr
	end

	local replaceComma = function(str)
		return str_gsub(str, ',', '\0')
	end

	local getDataNameById = function(structure, index)
		for k, v in next, structure do
			if v.index == index then
				return k
			end
		end
	end

	local strToTable

	strToTable = function(str)
		local out, index = { }, 0

		str = str_gsub(str, "%b{}", replaceComma)

		local tbl
		for value in str_gmatch(str, "[^,]+") do
			value = str_gsub(value, "%z", ',')

			tbl = str_match(value, "^{(.-)}$")

			index = index + 1
			if tbl then
				out[index] = strToTable(tbl)
			else
				out[index] = tonumber(value) or value
			end
		end

		return out
	end

	local getDataValue = function(value, valueType, valueName, valueDefault)
		if valueType == "boolean" then
			if value then
				value = (value == '1')
			else
				value = valueDefault
			end
		elseif valueType == "table" then
			value = str_match(value or '', "^{(.-)}$")
			value = value and strToTable(value) or valueDefault
		else
			if valueType == "number" then
				value = value and tonumber(value, 16)
			elseif valueType == "string" and value then
				value = str_match(value, "^\"(.-)\"$")
			end
			value = value or valueDefault
		end

		return value
	end

	local handleModuleData = function(self, playerName, structure, moduleData)
		local playerData = self.playerData[playerName]
		local valueName

		local dataIndex = 1
		if #moduleData > 0 then
			moduleData = str_gsub(moduleData, "%b{}", replaceComma)

			for value in str_gmatch(moduleData, "[^,]+") do
				value = str_gsub(value, "%z", ',')

				valueName = getDataNameById(structure, dataIndex)
				playerData[valueName] = getDataValue(value, structure[valueName].type, valueName,
					structure[valueName].default)
				dataIndex = dataIndex + 1
			end
		end

		local higherIndex = #self.structureIndexes
		if dataIndex <= higherIndex then
			for i = dataIndex, higherIndex do
				valueName = getDataNameById(structure, i)
				playerData[valueName] = getDataValue(nil, structure[valueName].type, valueName,
					structure[valueName].default)
			end
		end
	end

	DataHandler.newPlayer = function(self, playerName, data)
		data = data or ''

		self.playerData[playerName] = { }

		local module, otherData = extractPlayerData(self, data)
		self.otherPlayerData[playerName] = otherData

		handleModuleData(self, playerName, self.structure, (module and str_sub(module, 2, -2) or ''))

		return self
	end

	local tblToStr
	local transformType = function(valueType, index, str, value)
		if valueType == "number" then
			index = index + 1
			str[index] = str_format("%x", value)
		elseif valueType == "string" then
			index = index + 1
			str[index] = '"'
			index = index + 1
			str[index] = value
			index = index + 1
			str[index] = '"'
		elseif valueType == "boolean" then
			index = index + 1
			str[index] = (value and '1' or '0')
		elseif valueType == "table" then
			index = index + 1
			str[index] = '{'
			index = index + 1
			str[index] = tblToStr(value)
			index = index + 1
			str[index] = '}'
		end
		return index
	end

	tblToStr = function(tbl)
		local str, index = { }, 0

		local valueType
		for k, v in next, tbl do
			index = transformType(type(v), index, str, v)
			index = index + 1
			str[index] = ','
		end

		if str[index] == ',' then
			str[index] = ''
		end

		return tbl_concat(str)
	end

	local dataToStr = function(self, playerName)
		local str, index = { self.moduleID, "={" }, 2

		local playerData = self.playerData[playerName]
		local structureIndexes = self.structureIndexes
		local structure = self.structure

		local valueName, valueType, value
		for i = 1, #structureIndexes do
			valueName = structureIndexes[i]
			index = transformType(structure[valueName].type, index, str, playerData[valueName])
			index = index + 1
			str[index] = ','
		end

		if str[index] == ',' then
			str[index] = '}'
		else
			str[index + 1] = '}'
		end

		return tbl_concat(str)
	end

	DataHandler.dumpPlayer = function(self, playerName)
		local otherPlayerData = self.otherPlayerData[playerName]
		if otherPlayerData == '' then
			return dataToStr(self, playerName)
		else
			return dataToStr(self, playerName) .. "," .. otherPlayerData
		end
	end

	DataHandler.get = function(self, playerName, valueName)
		return self.playerData[playerName][valueName]
	end

	DataHandler.set = function(self, playerName, valueName, newValue, sum)
		self.hasDataChanged[playerName] = true
		playerName = self.playerData[playerName]
		if sum then
			playerName[valueName] = playerName[valueName] + newValue
		else
			playerName[valueName] = newValue
		end
		return self
	end

	DataHandler.save = function(self, playerName)
		if self.hasDataChanged[playerName] then
			self.hasDataChanged[playerName] = nil

			system.savePlayerData(playerName, self:dumpPlayer(playerName))
		end
		return self
	end
end

local timer = { }
do
	timer.start = function(self, callback, ms, times, ...)
		local t = self._timers
		t._count = t._count + 1

		t[t._count] = {
			id = t._count,
			callback = callback,
			args = { ... },
			defaultMilliseconds = ms,
			milliseconds = ms,
			times = times
		}
		t[t._count].args[#t[t._count].args + 1] = t[t._count]

		return t._count
	end

	timer.delete = function(self, id)
		local ts = self._timers
		ts[id] = nil
		ts._deleted = ts._deleted + 1
	end

	timer.loop = function(self)
		local ts = self._timers
		if ts._deleted >= ts._count then return end

		local t
		for i = 1, ts._count do
			t = ts[i]
			if t then
				t.milliseconds = t.milliseconds - 500
				if t.milliseconds <= 0 then
					t.milliseconds = t.defaultMilliseconds
					t.times = t.times - 1

					t.callback(tbl_unpack(t.args))

					if t.times == 0 then
						self:delete(i)
					end
				end
			end
		end
	end

	timer.refresh = function()
		timer._timers = {
			_count = 0,
			_deleted = 0
		}
	end
	timer.refresh()
end

local playerData = DataHandler.new(module.name, {
	rewards = {
		index = 1,
		default = 0
	},
	collectedEggs = {
		index = 2,
		default = 0
	},
	hotfixCheckRewardsDuplicate = {
		index = 3,
		default = 0
	}
})

local images, consumables

local loadAllImages
loadAllImages = function(playerName, _src)
	for k, v in next, (_src or images) do
		if type(v) == "table" then
			loadAllImages(playerName, v)
		else
			tfm.exec.removeImage(tfm.exec.addImage(v, "_0", -10000, -10000, playerName))
		end
	end
end

local isEventWorkingFor = function(playerName, ignoreDeath)
	local cache = playerCache[playerName]
	if cache and cache.isDataLoaded and (ignoreDeath or not cache.isDead) then
		return cache
	end
end

do
	local giveConsumables = tfm.exec.giveConsumables
	tfm.exec.giveConsumables = function(playerName, id, quantity)
		if id == consumables.sansaoFur or id == consumables.aliceRabbitFur then
			local pet = id == consumables.sansaoFur and module.reward.fur.sansao
				or module.reward.fur.aliceRabbit

			for i = 1, quantity do
				system.giveEventGift(playerName, pet)
			end
		else
			return giveConsumables(playerName, id, quantity)
		end
	end
end

--[[ API ]]--
local table_random = function(t)
	local index = math_random(#t)
	return t[index], index
end

local string_split = function(str, pat)
	local out, index = { }, 0
	for value in str_gmatch(str, pat) do
		index = index + 1
		out[index] = tonumber(value) or value
	end
	return out
end

local inRectangle = function(x, y, rx, ry, rw, rh)
	return (
		(x >= rx and x <= (rx + rw))
		and
		(y >= ry and y <= (ry + rh))
	)
end

local getDirection = function(i)
	return (i or math_random(0, 1))*2 - 1
end

local getRandomByWeight
getRandomByWeight = function(weights)
	local result, sum = math_random(0, module.timerMaximumWeight - 1), 0

	for i = 1, #weights do
		sum = sum + weights[i]
		if sum > result then
			return i
		end
	end

	-- Prevention if the sum of weights < 1e4
	return getRandomByWeight(weights)
end

local multiplyWeightsByBase
multiplyWeightsByBase = function(weightTable)
	local sum = 0

	local v
	for k = 1, #weightTable do
		v = weightTable[k]

		if type(v) == "table" then
			multiplyWeightsByBase(v)
		else
			v = v * module.timerMaximumWeight

			weightTable[k] = v
			sum = sum + v
		end
	end

	assert(sum == 0 or sum == module.timerMaximumWeight, (sum - module.timerMaximumWeight)
		.. "\n" .. debug.traceback())

	return weightTable
end

local getRandomWithDistributedUsedWeights = function(weightTable, sourceTable, sourceLenLimit)
	-- Split weights between the ones that have already been used and the ones that still did not
	local totalToDistribute = 0
	local unusedWeights, totalUnusedWeights, referencedUnusedWeights = { }, 0, { }

	for weight = 1, (sourceLenLimit or #sourceTable) do
		if not sourceTable[weight] then -- Whether has not been used yet
			totalUnusedWeights = totalUnusedWeights + 1
			referencedUnusedWeights[totalUnusedWeights] = weight

			unusedWeights[totalUnusedWeights] = weightTable[weight]
		else
			totalToDistribute = totalToDistribute + weightTable[weight]
		end
	end

	-- Distribute the weights that have already been used to the other weights
	totalToDistribute = totalToDistribute / totalUnusedWeights

	for set = 1, totalUnusedWeights do
		unusedWeights[set] = unusedWeights[set] + totalToDistribute
	end

	return referencedUnusedWeights[getRandomByWeight(unusedWeights)]
end

--[[ Tables ]]--

-- Enums
images = {
	npc = {
		background = "17f423a4d5a.jpg",
		ship = "17f42d2ad7b.png"
	},
	backgroundPixel = "17f18a77483.png",
	nest = "17ee1ab83bc.png",
	inputInterface = {
		"17f86a5142d.png",
		"17f868c91e1.png",
		"17f868ec44b.png",
		"17f868a478e.png",
		"17f868a6bcd.png",
		"17f868ee9eb.png",
		"17f8665a878.png"
	},
	eggs = {
		[1] = {
			-- Unlocked
			[1] = "17ef5628357.png",
			[2] = "17ef562d9bc.png",
			[3] = "17ef563173d.png",
			[4] = "17ef5636984.png",
			[5] = "17ef563a73f.png",
			-- Locked
			[-1] = "17ef562525b.png",
			[-2] = "17ef562bbf9.png",
			[-3] = "17ef562f911.png",
			[-4] = "17ef5633fda.png",
			[-5] = "17ef5638974.png",
			-- On Unlock Display
			[101] = "17f0edf3788.png",
			[102] = "17f0ee05376.png",
			[103] = "17f0ee0b89a.png",
			[104] = "17f0edf9779.png",
			[105] = "17f0edff6ab.png"
		},
		[2] = {
			[1] = "17f0ddad7ba.png",
			[2] = "17f0ddbfb02.png",
			[3] = "17f0ddef570.png",
			[4] = "17f0ddd16c1.png",
			[5] = "17f0dde0d4e.png",
			[-1] = "17f0ddb709b.png",
			[-2] = "17f0ddc6ea6.png",
			[-3] = "17f0ddf558e.png",
			[-4] = "17f0ddd7bab.png",
			[-5] = "17f0dde85c4.png",
			[101] = "17f0ee57be6.png",
			[102] = "17f0ee518b0.png",
			[103] = "17f0ee3f043.png",
			[104] = "17f0ee4b574.png",
			[105] = "17f0ee45517.png"
		},
		[3] = {
			[1] = "17f0ed69be4.png",
			[2] = "17f0ed707f8.png",
			[3] = "17f0ed76a3b.png",
			[4] = "17f0ed7c570.png",
			[5] = "17f0eda6a6c.png",
			[-1] = "17f0ed4c5dc.png",
			[-2] = "17f0ed52156.png",
			[-3] = "17f0ed57bd2.png",
			[-4] = "17f0ed5db24.png",
			[-5] = "17f0ed637dc.png",
			[101] = "17f0ee32da4.png",
			[102] = "17f0ee17bf4.png",
			[103] = "17f0ee209e2.png",
			[104] = "17f0ee26e47.png",
			[105] = "17f0ee2cf10.png"
		},
		[4] = {
			[1] = "17f0ed94a3e.png",
			[2] = "17f18725c52.png",
			[3] = "17f0eda0dd8.png",
			[4] = "17f28d42e22.png",
			[-1] = "17f0ed821d9.png",
			[-2] = "17f187377a2.png",
			[-3] = "17f0ed8e63c.png",
			[-4] = "17f28d3d601.png",
			[101] = "17f0ededc84.png",
			[102] = "17f0ee38d13.png",
			[103] = "17f0ee11bdd.png",
			[104] = "17f333c9f11.png"
		}
	},
	inventory = {
		background = "17f185afb20.png",
		foreground = "17f185b23fb.png"
	}
}

consumables = {
	sansaoFur = 666,
	aliceRabbitFur = 669,
	goldenTicket = 2257,
	seashell = 2497,
	normal = {
		2252, 2256, 2349, 2379, 2513, 2514,
		2330, 2351, 2522,
		2255,
		33,
		2246,
		21
	},
	throwable = {
		1, 11, 5, 20, 25, 26, 24
	}
}

local npcs = {
	neige = {
		title = 539,
		female = true,

		look = "16;181_DED5BF+DED5BF+DED5BF,0,0,22_DED5BF,60_B85677+9E324E+900F31+85354A+B45770+B34865+A63452+900F31+CC6E8D+AF546C,0,0,23,24_F7EEE1+DED5BF+DED5BF+DED5BF",

		lookAtPlayer = true,

		interactive = true,

		x = nil,
		y = nil
	},
	fluffy = {
		lookAtPlayer = true,

		interactive = true,

		x = nil,
		y = nil
	},
}

local groundProperties = {
	water = {
		type = 9,
		miceCollision = false,
		foreground = true,
		width = nil,
		height = nil
	},
	npcGrass = {
		type = 14,
		width = 600,
		height = 10,
		friction = .2,
		miceCollision = true,
		angle = 2
	},
	npcGrassDelimiter = {
		type = 14,
		width = 10,
		height = 200,
		friction = 0,
		miceCollision = true,
		angle = 0
	},
	shipWater = {
		type = 9,
		width = 50,
		height = 100,
		groundCollision = false
	}
}

local eggFlags = { }
do
	local eggCount = -1
	for set = 1, module.totalNormalSets do
		eggFlags[set] = { }
		set = eggFlags[set]

		for egg = 1, module.totalEggsPerSet do
			eggCount = eggCount + 1
			set[egg] = 2 ^ eggCount
		end
	end
end

-- Random Weights
local timeWeightType = {
	trap = 1,
	nothing = 2,
	egg = 3,
	rareEgg = 4,
	consumables = 5
}

local eggRarityType = {
	normal = 1,
	rare = 2
}

local trapType = {
	freeze = 1,
	mouseSize = 2,
	explosive = 3,
	cheesy = 4,
	nightMode = 5
}

local formulaInputTimingWeights = multiplyWeightsByBase {
	-- wrong answer
	[1] = {
		_time = 0,

		[timeWeightType.egg] = 0,
		[timeWeightType.rareEgg] = 0,
		[timeWeightType.consumables] = 0,
		[timeWeightType.trap] = 10/20,
		[timeWeightType.nothing] = 10/20
	},

	-- correct with half time remaining
	[2] = {
		_time = math_ceil(module.timeToInput / 2),

		[timeWeightType.trap] = 0,
		[timeWeightType.rareEgg] = 3/100,
		[timeWeightType.consumables] = 25/100,
		[timeWeightType.egg] = 26/100,
		[timeWeightType.nothing] = 46/100
	},

	-- correct with more than half time remainig
	[3] = {
		_time = module.timeToInput,

		[timeWeightType.trap] = 0,
		[timeWeightType.rareEgg] = 5/80,
		[timeWeightType.consumables] = 12/80,
		[timeWeightType.egg] = 23/80,
		[timeWeightType.nothing] = 40/80
	}
}

local eggSetRarity = multiplyWeightsByBase {
	[1] = 25/38,
	[2] = 10/38,
	[3] = 3/38
}

local eggsRarity = multiplyWeightsByBase {
	[eggRarityType.normal] = {
		[1] = {
			[1] = 7/20,
			[2] = 4/20,
			[3] = 0,
			[4] = 5/20,
			[5] = 4/20
		},
		[2] = {
			[1] = 4/20,
			[2] = 6/20,
			[3] = 10/20,
			[4] = 0,
			[5] = 0
		},
		[3] = {
			[1] = 14/20,
			[2] = 0,
			[3] = 0,
			[4] = 0,
			[5] = 6/20
		}
	},
	[eggRarityType.rare] = {
		[1] = {
			[1] = 0,
			[2] = 0,
			[3] = 1,
			[4] = 0,
			[5] = 0
		},
		[2] = {
			[1] = 0,
			[2] = 0,
			[3] = 0,
			[4] = 6/20,
			[5] = 14/20
		},
		[3] = {
			[1] = 0,
			[2] = 10/20,
			[3] = 4/20,
			[4] = 6/20,
			[5] = 0
		}
	}
}

local trapWeights = multiplyWeightsByBase {
	[trapType.mouseSize] = 1/10,
	[trapType.explosive] = 1/10,
	[trapType.nightMode] = 2/10,
	[trapType.freeze] = 3/10,
	[trapType.cheesy] = 3/10
}

-- Map
local mapSettings

local despawnTimes = { }

local waterGroundsToSpawn = { }
local waterGroundsToDespawn = { }

local mapCoverImages = { }

-- Triggerers
local puzzleTriggerers = {
	_images = { }
}

local inputCallback = { }

--[[ Functions ]]--
local Formula, FormulaInput, Inventory, EggUnlockNotifier, Trap

-- Map
local getMapElements = function(attribute, xml)
	local objects, index, tmpObject = { }, 0

	for data in str_gmatch((xml or tfm.get.room.xmlMapInfo.xml), "<" .. attribute .. " (.-)/>") do
		index = index + 1
		objects[index] = { }
		tmpObject = objects[index]

		for attributeName, _, value in str_gmatch(data, "([%w-_]+)=([\"'])(.-)%2") do
			tmpObject[attributeName] = tonumber(value) or value
		end
	end

	return objects, index
end

local getSectionDimensions = function(id)
	local sections = mapSettings.sections
	local sectionId = (id - 1) * 4 + 1

	return {
		id = id,
		x = sections[sectionId],
		y = sections[sectionId + 1],
		width = sections[sectionId + 2],
		height = sections[sectionId + 3]
	}
end

local getMapSettingsAndSections = function(xml)
	mapSettings = getMapElements("P", xml)[1]
	mapSettings.sections = string_split(mapSettings.sections, "[^,]+")

	local sections = { }
	for id = 1, #mapSettings.sections / 4 do
		sections[id] = getSectionDimensions(id)
		puzzleTriggerers._images[id] = {
			_count = 0
		}
	end
	mapSettings.sections = sections

	return xml
end

local getSectionByCoordinate = function(x, y)
	local sections = mapSettings.sections

	for section = 1, #sections do
		section = sections[section]

		if inRectangle(x, y, section.x, section.y, section.width, section.height) then
			return section
		end
	end
end

local populateWaterGrounds = function(water)
	waterGroundsToSpawn[#waterGroundsToSpawn + 1] = getMapElements("S", water)[1]

	water = str_gsub(water, "([XY])=\".-\"", "%1=\"-3000\"", 2) -- Removing the water will shift IDs
	return water
end

local spawnWaterGrounds = function()
	local tmpWater
	for g = 1, #waterGroundsToSpawn do
		tmpWater = waterGroundsToSpawn[g]

		g = 50 + g

		groundProperties.water.width = tmpWater.L
		groundProperties.water.height = tmpWater.H

		tfm.exec.addPhysicObject(g, tmpWater.X, tmpWater.Y, groundProperties.water)

		if not waterGroundsToDespawn[tmpWater.despawn] then
			waterGroundsToDespawn[tmpWater.despawn] = { }
		end
		waterGroundsToDespawn[tmpWater.despawn][#waterGroundsToDespawn[tmpWater.despawn] + 1] = g
	end
end

local coverMapContent = function(x, y, w, h, target)
	return tfm.exec.addImage(images.backgroundPixel, (target or "_") .. "149", x, y, nil, w, h)
end

local coverMapSection = function(groundID)
	local section = mapSettings.sections[groundID]

	mapCoverImages[groundID] =
		coverMapContent(section.x, section.y, section.width, section.height)
end

local despawnSection = function(groundID, ignoreRectangle)
	tfm.exec.removePhysicObject(groundID)

	local waters = waterGroundsToDespawn[groundID]
	if waters then
		for i = 1, #waters do
			tfm.exec.removePhysicObject(waters[i])
		end
	end

	local sectionId = groundID * 1000
	local sectionImages = puzzleTriggerers._images[groundID]

	for triggerer = 1, sectionImages._count do
		triggerer = sectionImages[triggerer]
		tfm.exec.removeImage(triggerer)
		tfm.exec.removeBonus(sectionId + triggerer)
	end

	if ignoreRectangle then return end
	timer:start(coverMapSection, 1500, 1, groundID)
end

local killAllActiveSections = function()
	for ground in next, despawnTimes do
		if mapCoverImages[ground] then
			tfm.exec.removeImage(mapCoverImages[ground])
		else
			despawnSection(ground, true)
		end
	end
end

local getDespawnableGrounds = function(xml)
	local grounds, totalGrounds = { }, 0
	for ground in str_gmatch(xml, "lua=\"(%d+)\"") do
		totalGrounds = totalGrounds + 1
		grounds[totalGrounds] = ground
	end

	local isRandom = mapSettings.random

	local maximumTime = (module.time - module.timeLeftForNPC - 3)
	local avgTimePerSection = maximumTime / totalGrounds

	local minDespawnTime, maxDespawnTime = avgTimePerSection * .5, avgTimePerSection * .85
	local randomDespawnTime, ground, groundIndex
	repeat
		if isRandom then
			ground, groundIndex = table_random(grounds)
		else
			ground, groundIndex = grounds[1], 1
		end
		ground = ground * 1

		minDespawnTime, maxDespawnTime = minDespawnTime + avgTimePerSection * .5,
			maxDespawnTime + avgTimePerSection * .85

		randomDespawnTime = 3000 + math_random(minDespawnTime, maxDespawnTime) * 1000
		despawnTimes[ground] = randomDespawnTime

		xml = str_gsub(xml, "<S [^/]-despawn=\"" .. ground .. "\"[^/]-/>", populateWaterGrounds)
		timer:start(despawnSection, randomDespawnTime, 1, ground, false)

		tbl_remove(grounds, groundIndex)
	until not grounds[1]

	return xml
end

local displayMapImages = function(attribute, target, playerName)
	if not mapSettings[attribute] then return end
	if type(mapSettings[attribute]) == "string" then
		mapSettings[attribute] = string_split(mapSettings[attribute], "[^,]+")
	end
	tfm.exec.addImage(mapSettings[attribute][1], target, mapSettings[attribute][2] or 0,
		mapSettings[attribute][3] or 0, playerName)
end

-- Decorations
local placeTriggerers = function()
	local decorations = getMapElements("P", xml) -- Must ignore [1]

	local decoration, section, id, x, y, image, tmpImageList, tmpAxis
	for d = 2, #decorations do
		decoration = decorations[d]

		section = getSectionByCoordinate(decoration.X, decoration.Y)

		if section and decoration.egg then -- is special decoration
			tmpAxis = string_split(decoration.egg, "[^,]+")

			x = decoration.X + (tmpAxis[1] or 0)
			y = decoration.Y + (tmpAxis[2] or -10)

			image = tfm.exec.addImage(images.nest, "!1", x, y)

			tmpImageList = puzzleTriggerers._images[section.id]
			tmpImageList._count = tmpImageList._count + 1
			tmpImageList[tmpImageList._count] = image

			id = (section.id * 1000) + image -- triggerers in other sections may exist otherwise

			puzzleTriggerers[id] = {
				x = x,
				y = y
			}

			tfm.exec.addBonus(0, x, y, id, 0, false)
		end
	end
end

-- Interface
local closeInventory = function(playerName)
	local cache = isEventWorkingFor(playerName, true)
	if not cache then return end
	if not cache.inventoryInterface then return end

	cache.inventoryInterface:close()
	cache.inventoryInterface = nil
end

local displayInventory = function(playerName)
	local cache = isEventWorkingFor(playerName, true)
	if not cache then return end
	if cache.inventoryInterface then
		return closeInventory(playerName)
	end

	cache.inventoryInterface = Inventory
		:new(playerName, cache)
		:displayEggs()
		:checkSetCompletion()
end

local startNPCPhase
do
	local placeStaticGrounds = function(mapX, mapHeight)
		tfm.exec.addPhysicObject(1, mapX, mapHeight - 30, groundProperties.npcGrass)

		local grassHalfWidth = groundProperties.npcGrass.width / 2
		for g = 0, 1 do
			tfm.exec.addPhysicObject(g + 2, mapX + (grassHalfWidth * getDirection(g)),
				mapHeight - 100, groundProperties.npcGrassDelimiter)
		end
	end

	local reviveAllPlayers = function(mapX, mapHeight)
		for playerName, cache in next, playerCache do
			if type(cache.trap) == "table" then
				cache.trap:triggerUndo(playerName, cache)
			end

			tfm.exec.respawnPlayer(playerName)
			tfm.exec.movePlayer(playerName, mapX + 50, mapHeight - 100, nil, 1, -1, true)
		end
	end

	local placeNPCs = function(mapX, mapHeight)
		tfm.exec.addImage(images.npc.background, "_150", mapX, mapHeight - 400, nil, nil, nil, nil,
			nil, 0.5)

		mapX, mapHeight = mapX + 130, mapHeight - 50

		npcs.neige.x = mapX
		npcs.neige.y = mapHeight

		tfm.exec.addNPC("Neige", npcs.neige)

		npcs.fluffy.x = mapX - 230
		npcs.fluffy.y = mapHeight

		tfm.exec.addNPC("Fluffy", npcs.fluffy)
	end

	local placeShip = function(mapX, mapHeight)
		mapHeight = mapHeight + 100

		tfm.exec.addPhysicObject(5, mapX, mapHeight, groundProperties.shipWater)

		tfm.exec.addImage(images.npc.ship, "#" .. tfm.exec.addShamanObject(6300, mapX, mapHeight),
			550, -340, nil, -1, nil, nil, nil, 0.5)
	end

	startNPCPhase = function()
		local mapWidth, mapHeight = mapSettings.L or 800, mapSettings.H or 400

		local mapX = mapWidth / 2

		placeStaticGrounds(mapX, mapHeight)
		coverMapContent(-50, -50, mapWidth + 100, mapHeight + 100)
		reviveAllPlayers(mapX, mapHeight)
		placeNPCs(mapX, mapHeight)
		placeShip(mapX, mapHeight)

		ui.setMapName(module.formalName)

		tfm.exec.disableAutoNewGame(false)
	end
end

-- Eggs
local playerHasEgg = function(set, egg, playerEggs)
	return band(eggFlags[set][egg], playerEggs) > 0
end

local populatePlayerEggs = function(playerName, cache)
	local playerEggs = playerData:get(playerName, "collectedEggs")

	local cachedEggs = cache.eggs
	local superEggs = { }

	local totalCompleteEggSets = module.totalNormalSets
	local hasIncompleteSet = false
	local eggSet, completeSet
	for set = 1, module.totalNormalSets do
		eggSet, completeSet = { }, true

		for egg = 1, module.totalEggsPerSet do
			eggSet[egg] = playerHasEgg(set, egg, playerEggs)

			if not eggSet[egg] then
				completeSet = false
			end
		end

		cachedEggs[set] = eggSet
		superEggs[set] = completeSet
		if not completeSet then
			hasIncompleteSet = true
			totalCompleteEggSets = totalCompleteEggSets - 1
		end
	end

	superEggs[module.totalNormalSets + 1] = not hasIncompleteSet
	cachedEggs[module.totalNormalSets + 1] = superEggs

	cache.totalCompleteEggSets = totalCompleteEggSets

	tfm.exec.chatMessage(translation.greetingByProgress[totalCompleteEggSets], playerName)
end

local selectEggSetToOffer = function(cachedEggs)
	local superSet = cachedEggs[module.totalNormalSets + 1]

	local hasFinishedAnySet = false
	for set = 1, module.totalNormalSets do
		if superSet[set] then
			hasFinishedAnySet = true
			break
		end
	end
	-- If has completed no or all sets
	if not hasFinishedAnySet or superSet[module.totalNormalSets + 1] then
		return getRandomByWeight(eggSetRarity)
	end

	return getRandomWithDistributedUsedWeights(eggSetRarity, superSet, module.totalNormalSets)
end

local selectEgg = function(rarityType, cachedEggs)
	local selectedSet = selectEggSetToOffer(cachedEggs)
	local egg = getRandomByWeight(eggsRarity[rarityType][selectedSet])

	return selectedSet, egg
end

local offerEgg = function(playerName, rarityType)
	local cache = playerCache[playerName]
	local cachedEggs = cache.eggs

	local selectedSet, egg = selectEgg(rarityType, cachedEggs)

	cache.eggNotifier:show(selectedSet, egg)

	local targetSet = cachedEggs[selectedSet]
	-- Is repeated egg
	if targetSet[egg] then
		-- Don't offer consumables
		return nil
	end
	targetSet[egg] = true

	playerData
		:set(playerName, "collectedEggs", eggFlags[selectedSet][egg], true)
		:save(playerName)

	-- Checks if player has finished the set
	for egg = 1, module.totalEggsPerSet do
		if not targetSet[egg] then
			-- Egg is new + no super egg
			return consumables.aliceRabbitFur, 1
		end
	end

	-- Offer the super egg
	local superSetId = module.totalNormalSets + 1
	local superSet = cachedEggs[superSetId]

	superSet[selectedSet] = true
	cache.totalCompleteEggSets = cache.totalCompleteEggSets + 1

	cache.eggNotifier:show(superSetId, selectedSet)
	tfm.exec.chatMessage(translation.credits, playerName)

	-- Checks if all super eggs are unlocked
	for set = 1, module.totalNormalSets do
		if not superSet[set] then
			-- Unlock super egg + no event end
			return consumables.sansaoFur, 10
		end
	end

	-- Offer the last super egg
	superSet[superSetId] = true

	cache.eggNotifier:show(superSetId, superSetId)

	-- Event end
	return consumables.sansaoFur, 20
end

-- Input
inputCallback[timeWeightType.trap] = function(playerName)
	local trap = getRandomByWeight(trapWeights)

	if Trap._list[trap] then
		Trap._list[trap]:trigger(playerName)
	end
end

inputCallback[timeWeightType.egg] = function(playerName)
	local furToOffer, furQuantity = offerEgg(playerName, eggRarityType.normal)
	if furToOffer then
		tfm.exec.giveConsumables(playerName, furToOffer, furQuantity)
	end

	inputCallback[timeWeightType.consumables](playerName)
	tfm.exec.giveConsumables(playerName, consumables.seashell, 2)
end

inputCallback[timeWeightType.rareEgg] = function(playerName)
	local furToOffer, furQuantity = offerEgg(playerName, eggRarityType.rare)
	if furToOffer then
		tfm.exec.giveConsumables(playerName, furToOffer, furQuantity)
	end

	inputCallback[timeWeightType.consumables](playerName)
	tfm.exec.giveConsumables(playerName, consumables.goldenTicket, 1)
end

inputCallback[timeWeightType.consumables] = function(playerName)
	local consumableType = math_random(1, 100) < 51 and consumables.normal or consumables.throwable
	tfm.exec.giveConsumables(playerName, table_random(consumableType), math_random(1, 3))
end

--[[ CLasses ]]--
-- Formula
do
	Formula = { }
	Formula.__index = Formula

	local operators = {
		[1] = '+',
		[2] = '-',
		[3] = '*',
		[4] = '/',

		priority = {
			[1] = {
				['*'] = function(l, r) return l * r end,
				['/'] = function(l, r) return l / r end
			},
			[2] = {
				['+'] = function(l, r) return l + r end,
				['-'] = function(l, r) return l - r end
			}
		},

		signs = {
			match = "[*/]",

			['*'] = '×',
			['/'] = '÷'
		}
	}

	Formula.new = function(totalValues)
		return setmetatable({
			tree = { },

			result = nil,

			str = nil,
			beautifiedStr = nil
		}, Formula)
	end

	Formula.generate = function(self, options)
		local tree = self.tree

		local numberRange = options.numberRange
		local canHaveNegativeNumbers = options.canHaveNegativeNumbers
		local canHaveDivision = options.canHaveDivision
		local totalValues = options.totalValues * 2

		local operatorIndex
		for i = 2, totalValues, 2 do
			-- Avoid zero in the range
			tree[i - 1] = math_random(1, numberRange) *
				(canHaveNegativeNumbers and getDirection() or 1)

			if i == totalValues then
				break
			end

			repeat
				tree[i], operatorIndex = table_random(operators)
			until canHaveDivision or operatorIndex ~= 4
		end

		return self:setStr()
	end

	Formula.setStr = function(self)
		self.str = tbl_concat(self.tree, ' ')

		self.beautifiedStr = str_gsub(self.str, operators.signs.match, operators.signs)

		return self
	end

	Formula.calculate = function(self)
		local tree = self.tree
		local priority = operators.priority

		local index
		local tmpOp, tmpCalc
		for p = 1, #priority do
			p = priority[p]

			index = 0
			repeat
				index = index + 2
				tmpOp = tree[index]

				if p[tmpOp] then
					tmpCalc = p[tmpOp](tree[index - 1], tree[index + 1])

					tbl_remove(tree, index + 1) -- right side number
					tbl_remove(tree, index) -- operator

					tree[index - 1] = tmpCalc

					index = index - 2
				end
			until not tmpOp
		end

		self.result = tree[1]
		self.tree = nil

		return self
	end

	Formula.compare = function(self, playerResult)
		return math_abs(self.result - playerResult) <= 1
	end
end

-- FormulaInput
do
	FormulaInput = { }

	FormulaInput.__index = FormulaInput

	FormulaInput.new = function(self, playerName, formula)
		ui.addPopup(interfaceId.formula, 2, '', playerName, 305, 191, 202, true)

		local image = { }
		image[1] = tfm.exec.addImage(images.inputInterface[1], "~100", 215, 126, playerName)
		image[2] = tfm.exec.addImage(images.inputInterface[2], "~100", 313, 222, playerName)
		image[3] = tfm.exec.addImage(images.inputInterface[3], "~100", 215, 194, playerName)
		image[4] = tfm.exec.addImage(images.inputInterface[4], "~100", 216, 201, playerName)
		image[5] = tfm.exec.addImage(images.inputInterface[5], "~100", 495, 201, playerName)
		image[6] = tfm.exec.addImage(images.inputInterface[6], "~100", 215, 252, playerName)
		image[7] = tfm.exec.addImage(images.inputInterface[7], "~100", 215, 258, playerName)

		ui.addTextArea(interfaceId.formula, "<font size='20'><p align='center'>"
			.. formula.beautifiedStr .. "<font size='15'>\n= ?", playerName, 220, 145, 368, nil, 1,
			1, 0, true)

		return setmetatable({
			playerName = playerName,

			images = image,
			formula = formula,

			update = true,
			timerCountdown = module.timeToInput,
			timerColor = 0x00FF00, -- Green
			timerWidth = 348
		}, FormulaInput)
	end

	FormulaInput.updateTimer = function(self)
		if not self.update then return end

		if self.timerCountdown <= -0.5 then
			return eventPopupAnswer(0, self.playerName, '')
		end

		ui.addTextArea(interfaceId.formula + 1, '', self.playerName, 230, 270, self.timerWidth, 3,
			self.timerColor, self.timerColor, 0.5, true)

		self.timerColor = self.timerColor + module.inputTimerColorVariation
		self.timerCountdown = self.timerCountdown - 0.5
		self.timerWidth = math_max(1, (348 * self.timerCountdown) / module.timeToInput)
	end

	FormulaInput.checkResult = function(self, answer)
		answer = answer and self.formula:compare(answer)

		local remainingTime = self.timerCountdown
		if not answer then
			remainingTime = 0
		end

		-- Get weight
		local weight
		for w = 1, #formulaInputTimingWeights do
			w = formulaInputTimingWeights[w]

			if remainingTime <= w._time then
				weight = w
				break
			end
		end
		weight = getRandomByWeight(weight)

		if inputCallback[weight] then
			inputCallback[weight](self.playerName)
		end
	end

	FormulaInput.close = function(self, ignorePopUp)
		self.update = false -- Avoid timing issues

		if not ignorePopUp then
			ui.addPopup(interfaceId.formula, 0, '', self.playerName, -1500, -1500)
		end
		ui.removeTextArea(interfaceId.formula, self.playerName)
		ui.removeTextArea(interfaceId.formula + 1, self.playerName)

		for i = 1, #self.images do
			tfm.exec.removeImage(self.images[i])
		end
	end
end

-- Inventory
do
	Inventory = { }
	Inventory.__index = Inventory

	Inventory.new = function(self, playerName, cache)
		return setmetatable({
			playerName = playerName,
			cache = cache,

			images = { }
		}, Inventory)
	end

	Inventory.displayEggs = function(self)
		local totalCachedImages = #self.images

		totalCachedImages = totalCachedImages + 1
		self.images[totalCachedImages] = tfm.exec.addImage(images.inventory.background, "&0", 200,
			120, self.playerName)

		totalCachedImages = totalCachedImages + 1
		self.images[totalCachedImages] = tfm.exec.addImage(images.inventory.foreground, "&2", 200,
			120, self.playerName)

		local eggImages = images.eggs
		local cachedEggs = self.cache.eggs

		local superSetId = module.totalNormalSets + 1
		local superSet = cachedEggs[superSetId]

		local tmpSet
		for set = 1, module.totalNormalSets do
			tmpSet = cachedEggs[set]
			for egg = 1, module.totalEggsPerSet do
				-- Regular eggs
				totalCachedImages = totalCachedImages + 1
				self.images[totalCachedImages] = tfm.exec.addImage(
					eggImages[set][(tmpSet[egg] and egg or -egg)],
					"&1", 180 + (egg * 46), 85 + (set * 60) + set, self.playerName)
			end

			totalCachedImages = totalCachedImages + 1
				self.images[totalCachedImages] = tfm.exec.addImage(
					eggImages[superSetId][(superSet[set] and set or -set)],
					"&1", 470 + (set % 2 * set - 1), 80 + (set * 60) + set, self.playerName)
		end

		totalCachedImages = totalCachedImages + 1
		self.images[totalCachedImages] = tfm.exec.addImage(
			eggImages[superSetId][(superSet[superSetId] and superSetId or -superSetId)],
			"&1", 536, 190, self.playerName)

		return self
	end

	Inventory.checkSetCompletion = function(self)
		local rewards = playerData:get(self.playerName, "rewards")
		local superEggs = self.cache.eggs[module.totalNormalSets + 1]

		local hotfixCheckRewardsDuplicate = playerData:get(self.playerName,
			"hotfixCheckRewardsDuplicate") ~= 3

		local tmpFlag
		for set = 1, #superEggs do
			if superEggs[set] then -- Is complete
				tmpFlag = 2 ^ (set - 1)

				local notGiven = band(tmpFlag, rewards) == 0
				if hotfixCheckRewardsDuplicate or notGiven then -- No reward given
					for _, reward in next, module.reward[set] do
						system.giveEventGift(self.playerName, reward)
					end

					if notGiven then
						rewards = rewards + tmpFlag
						playerData:set(self.playerName, "rewards", rewards)
					end

					if translation.rewardMessage[set] then
						tfm.exec.chatMessage(translation.rewardMessage[set], self.playerName)
					end
				end
			end
		end

		playerData
			:set(self.playerName, "hotfixCheckRewardsDuplicate", 3)
			:save(self.playerName)

		return self
	end

	Inventory.close = function(self)
		local images = self.images
		for i = #images, 1, -1 do
			tfm.exec.removeImage(images[i])
		end
	end
end

-- EggUnlockNotifier
do
	EggUnlockNotifier = { }
	EggUnlockNotifier.__index = EggUnlockNotifier

	EggUnlockNotifier.new = function(self, playerName)
		return setmetatable({
			playerName = playerName,

			stack = {
				--[[
				[i] = {
					time = 0,
					image = '',
					imageId = 0
				}
				]]
			},
			update = false
		}, EggUnlockNotifier)
	end

	EggUnlockNotifier.show = function(self, set, egg)
		local stack = self.stack
		local stackLen = #stack + 1

		local image = images.eggs[set][100 + egg]
		stack[stackLen] = {
			time = module.removeEggUnlockNotificationAfter,
			image = image,
			imageId = tfm.exec.addImage(image, "&1", 0, 400 - (stackLen * 40),
				self.playerName)
		}

		self.update = true
	end

	EggUnlockNotifier.update = function(this)
		local toRemove, removeIndex
		local eggNotifier, stack, stackValue
		for playerName, cache in next, playerCache do
			eggNotifier = cache.eggNotifier

			if eggNotifier.update then
				stack = eggNotifier.stack

				removeIndex = 0
				toRemove = { }

				for value = 1, #stack do
					stackValue = stack[value]
					stackValue.time = stackValue.time - this.defaultMilliseconds
					if stackValue.time <= 0 then
						removeIndex = removeIndex + 1
						toRemove[removeIndex] = value
					end
				end

				if removeIndex > 0 then
					for value = removeIndex, 1, -1 do
						value = toRemove[value]
						tfm.exec.removeImage(stack[value].imageId)
						tbl_remove(stack, value)
					end

					-- Repositioning the remaining items
					for value = toRemove[1], #stack do
						stackValue = stack[value]

						tfm.exec.removeImage(stackValue.imageId)

						stackValue.imageId = tfm.exec.addImage(stackValue.image, "&1", 0,
							400 - (value * 40), playerName)
					end
				end

				eggNotifier.update = #stack > 0
			end
		end
	end

	timer:start(EggUnlockNotifier.update, module.refreshEggUnlockNotifierAfter, 0)
end

-- Trap
do
	Trap = { }
	Trap.__index = Trap

	Trap._list = { }

	Trap.new = function(self, type)
		local this = setmetatable({
			type = type,

			begin = nil,

			undo = nil,
			afterTime = nil,

			timer = nil,
			timerTime = nil,
			timerIter = nil
		}, Trap)

		Trap._list[type] = this

		return this
	end

	Trap.setBegin = function(self, fn)
		self.begin = fn
		return self
	end

	Trap.setUndo = function(self, fn, afterTime)
		self.undo = fn
		self.afterTime = afterTime
		return self
	end

	Trap.setTimer = function(self, fn, time, iter)
		self.timer = fn
		self.timerTime = time
		self.timerIter = iter
		return self
	end

	Trap.trigger = function(self, playerName)
		local cache = playerCache[playerName]
		cache.trap = self

		if self.begin then
			self:begin(playerName)
		end

		if self.undo and self.afterTime then
			timer:start(self.triggerUndo, self.afterTime, 1, self, playerName, cache)
		end

		if self.timer then
			timer:start(self.timer, self.timerTime, self.timerIter, self, playerName, cache)
		end
	end

	Trap.triggerUndo = function(self, playerName, cache)
		if self.undo then
			self:undo(playerName)
		end
		cache.trap = nil
	end
end
do
	Trap
		:new(trapType.freeze)
		:setBegin(function(_, playerName)
			tfm.exec.freezePlayer(playerName, true, true)
		end)
		:setUndo(function(_, playerName)
			tfm.exec.freezePlayer(playerName, false, true)
		end, 3000)

	Trap
		:new(trapType.mouseSize)
		:setTimer(function(_, playerName, cache, timer)
			local size
			if timer.times == 0 then
				size = 1
				cache.trap = nil
			else
				size = math_random(3, 38) / 10
			end

			tfm.exec.changePlayerSize(playerName, size)
		end, 500, 15)
		:setUndo(function(_, playerName)
			tfm.exec.changePlayerSize(playerName, 1)
		end, nil)

	Trap
		:new(trapType.explosive)
		:setTimer(function(_, playerName, cache, timer)
			local playerInfo = tfm.get.room.playerList[playerName]
			tfm.exec.explosion(playerInfo.x, playerInfo.y, 10, 80, true)
			tfm.exec.displayParticle(10, playerInfo.x, playerInfo.y)

			if timer.times == 0 then
				cache.trap = nil
			end
		end, 1000, 7)

	Trap
		:new(trapType.cheesy)
		:setBegin(function(_, playerName)
			for _ = 1, 3 do
				tfm.exec.giveCheese(playerName)
			end
		end)
		:setUndo(function(_, playerName)
			for _ = 1, 3 do
				tfm.exec.removeCheese(playerName)
			end
		end, 7000)

	Trap
		:new(trapType.nightMode)
		:setBegin(function(_, playerName)
			tfm.exec.setPlayerNightMode(true, playerName)
		end)
		:setUndo(function(_, playerName)
			tfm.exec.setPlayerNightMode(false, playerName)
		end, 5000)
end

--[[ Events ]]--
local hasLoaded = false
eventNewGame = function()
	if hasLoaded then
		return system.exit()
	end
	hasLoaded = true

	tfm.exec.setGameTime(module.time)

	-- Both values should always exist
	ui.setMapName("<CEP>" .. mapSettings.name .. " <BL>- <CH>" .. mapSettings.author)

	spawnWaterGrounds()
	placeTriggerers()

	for playerName in next, tfm.get.room.playerList do
		playerCache[playerName] = {
			isDataLoaded = false,
			isDead = false,

			eggs = { },
			totalCompleteEggSets = nil,

			inputInterface = nil,
			inventoryInterface = nil,
			eggNotifier = EggUnlockNotifier:new(playerName),

			trap = nil
		}

		system.loadPlayerData(playerName)
	end

	displayMapImages("background", "?0")
	displayMapImages("foreground", "_100")

	loadAllImages()

	-- Spawn cage
	-- HOTFIX
	tfm.exec.addPhysicObject(700, -100, -50, {
		type = 14,
		width = 35,
		height = 10
	})
	tfm.exec.addPhysicObject(701, -100, -10, {
		type = 14,
		width = 35,
		height = 10
	})
	tfm.exec.addPhysicObject(702, -80, -30, {
		type = 14,
		width = 10,
		height = 35
	})
	tfm.exec.addPhysicObject(703, -120, -30, {
		type = 14,
		width = 10,
		height = 35
	})
	coverMapContent(-150, -80, 100, 100, '!')
end

eventPlayerDataLoaded = function(playerName, data)
	playerData:newPlayer(playerName, data)

	local cache = playerCache[playerName]

	populatePlayerEggs(playerName, cache)

	cache.isDataLoaded = true
end

eventNewPlayer = function(playerName)
	displayMapImages("background", "?0", playerName)
	displayMapImages("foreground", "_100", playerName)

	loadAllImages(playerName)
end

eventPlayerBonusGrabbed = function(playerName, id)
	local cache = isEventWorkingFor(playerName)
	if not cache then return end

	local triggerer = puzzleTriggerers[id]
	if not triggerer then return end

	if cache.trap then
		timer:start(tfm.exec.addBonus, 3000, 1, 0, triggerer.x, triggerer.y, id, 0, false,
			playerName)
		return
	end

	cache.trap = true -- Don't let them get another bonus because of being frozen
	tfm.exec.freezePlayer(playerName, true, false)
	tfm.exec.movePlayer(playerName, triggerer.x, triggerer.y)

	local totalCompleteEggSets = cache.totalCompleteEggSets

	local formula = Formula
		:new()
		:generate({
			totalValues = (
				(totalCompleteEggSets == 1 and 2)
				or
				math_random(2, 3)
			),

			numberRange = (
				(totalCompleteEggSets == 0 and 12)
				or
				(totalCompleteEggSets == 1 and 15)
				or
				20
			),

			canHaveNegativeNumbers = cache.totalCompleteEggSets >= 0,

			canHaveDivision = cache.totalCompleteEggSets >= 2
		})
		:calculate()

	cache.inputInterface = FormulaInput:new(playerName, formula)
end

eventPopupAnswer = function(id, playerName, answer)
	local cache = isEventWorkingFor(playerName)
	if not cache then return end

	if not cache.inputInterface then return end
	cache.inputInterface:close()

	cache.trap = nil -- Reset trap before real traps may get triggered
	tfm.exec.freezePlayer(playerName, false)

	answer = tonumber(answer) or tonumber(str_match(str_gsub(answer, ',', '.', 1), "%-?%d+%.?%d*"))
	cache.inputInterface:checkResult(answer)

	cache.inputInterface = nil
end

local hasNPCGroundStarted = false
eventLoop = function(elapsedTime, remainingTime)
	if hasLoaded == true then
		hasLoaded = 666
		return
	end

	if hasLoaded == 666 and elapsedTime >= 5000 and remainingTime <= module.timeLeftForNPCPlus5InMs then
		if not hasNPCGroundStarted then
			hasNPCGroundStarted = true
			timer.refresh()

			killAllActiveSections()
			timer:start(startNPCPhase, 4000 + 500, 1)
		end
	end

	timer:loop()
end

eventPlayerDied = function(playerName)
	local cache = isEventWorkingFor(playerName, true)
	if not cache then return end

	cache.isDead = true

	if cache.inputInterface then
		cache.inputInterface:close()
		cache.inputInterface = nil
	end

	-- HOTFIX
	tfm.exec.respawnPlayer(playerName)
	tfm.exec.movePlayer(playerName, -110, -40)

	-- Checks if everyone has died and call NPC start
	if hasNPCGroundStarted then return end

	for _, cache in next, playerCache do
		if not cache.isDead then
			return
		end
	end

	tfm.exec.setGameTime(module.timeLeftForNPCPlus5)
end

eventTalkToNPC = function(playerName, npcName)
	if not hasNPCGroundStarted then return end

	if npcName == "Neige" or npcName == " Neige " then
		displayInventory(playerName)
	elseif npcName == "Fluffy" then
		system.openEventShop("easter", playerName)
	end
end

-- Update all interface timers
timer:start(function()
	for playerName, cache in next, playerCache do
		if cache.inputInterface then
			cache.inputInterface:updateTimer()
		end
	end
end, 500, 0)

--[[ Init ]]--
tfm.exec.disableAutoShaman()
tfm.exec.disableAutoNewGame()
tfm.exec.disableAutoTimeLeft()
tfm.exec.disableDebugCommand()
tfm.exec.disablePhysicalConsumables()
tfm.exec.disableMortCommand()
tfm.exec.disableAfkDeath()

tfm.exec.newGame(getDespawnableGrounds(getMapSettingsAndSections(table_random(module.maps))))

-- DEBUG
system.newTimer(function()
	tfm.exec.chatMessage("Works", "Bolodefchoco#0015")
end, 1000, false)
